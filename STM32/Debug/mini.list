
mini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00006a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000068  08005a78  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005a78  00007378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4e4  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4c  00000000  00000000  0001457c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000164c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a3c  00000000  00000000  000171e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017276  00000000  00000000  00017c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee6c  00000000  00000000  0002ee92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090130  00000000  00000000  0003dcfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cde2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  000cde74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005788 	.word	0x08005788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005788 	.word	0x08005788

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <SetRGBColor>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void bluetooth_Event();

void SetRGBColor(uint8_t red, uint8_t green, uint8_t blue)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
 80005aa:	460b      	mov	r3, r1
 80005ac:	71bb      	strb	r3, [r7, #6]
 80005ae:	4613      	mov	r3, r2
 80005b0:	717b      	strb	r3, [r7, #5]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, red);
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <SetRGBColor+0x38>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	79fa      	ldrb	r2, [r7, #7]
 80005b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, green);
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <SetRGBColor+0x38>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	79ba      	ldrb	r2, [r7, #6]
 80005c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, blue);
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <SetRGBColor+0x38>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	797a      	ldrb	r2, [r7, #5]
 80005c8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	200000d8 	.word	0x200000d8

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fed0 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f840 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa00 	bl	80009ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f9aa 	bl	8000944 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80005f4:	f000 f918 	bl	8000828 <MX_TIM3_Init>
  MX_TIM2_Init();
 80005f8:	f000 f8a0 	bl	800073c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	4911      	ldr	r1, [pc, #68]	@ (8000644 <main+0x68>)
 8000600:	4811      	ldr	r0, [pc, #68]	@ (8000648 <main+0x6c>)
 8000602:	f002 fe72 	bl	80032ea <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000606:	2201      	movs	r2, #1
 8000608:	4910      	ldr	r1, [pc, #64]	@ (800064c <main+0x70>)
 800060a:	4811      	ldr	r0, [pc, #68]	@ (8000650 <main+0x74>)
 800060c:	f002 fe6d 	bl	80032ea <HAL_UART_Receive_IT>
  printf("start main2()\r\n");
 8000610:	4810      	ldr	r0, [pc, #64]	@ (8000654 <main+0x78>)
 8000612:	f003 ff97 	bl	8004544 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx2Flag)
 8000616:	4b10      	ldr	r3, [pc, #64]	@ (8000658 <main+0x7c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2b00      	cmp	r3, #0
 800061e:	d006      	beq.n	800062e <main+0x52>
	  {
			printf("recv2 : %s\r\n",rx2Data);
 8000620:	490e      	ldr	r1, [pc, #56]	@ (800065c <main+0x80>)
 8000622:	480f      	ldr	r0, [pc, #60]	@ (8000660 <main+0x84>)
 8000624:	f003 ff26 	bl	8004474 <iprintf>
			rx2Flag =0;
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <main+0x7c>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }
	  if(btFlag)
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <main+0x88>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0ee      	beq.n	8000616 <main+0x3a>
	  {
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <main+0x88>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 800063e:	f000 fa67 	bl	8000b10 <bluetooth_Event>
	  if(rx2Flag)
 8000642:	e7e8      	b.n	8000616 <main+0x3a>
 8000644:	200001b0 	.word	0x200001b0
 8000648:	20000120 	.word	0x20000120
 800064c:	200001e7 	.word	0x200001e7
 8000650:	20000168 	.word	0x20000168
 8000654:	080057a0 	.word	0x080057a0
 8000658:	200001b1 	.word	0x200001b1
 800065c:	200001b4 	.word	0x200001b4
 8000660:	080057b0 	.word	0x080057b0
 8000664:	200001e6 	.word	0x200001e6

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f864 	bl	8004744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	@ (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d8:	2310      	movs	r3, #16
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e6:	2304      	movs	r3, #4
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f9fc 	bl	8001aec <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 fb8d 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2102      	movs	r1, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fc5e 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000726:	f000 fb77 	bl	8000e18 <Error_Handler>
  }
}
 800072a:	bf00      	nop
 800072c:	3750      	adds	r7, #80	@ 0x50
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	@ 0x38
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800076c:	4b2d      	ldr	r3, [pc, #180]	@ (8000824 <MX_TIM2_Init+0xe8>)
 800076e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000772:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000774:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <MX_TIM2_Init+0xe8>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000780:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000782:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000786:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <MX_TIM2_Init+0xe8>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000794:	4823      	ldr	r0, [pc, #140]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000796:	f001 fe41 	bl	800241c <HAL_TIM_Base_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007a0:	f000 fb3a 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ae:	4619      	mov	r1, r3
 80007b0:	481c      	ldr	r0, [pc, #112]	@ (8000824 <MX_TIM2_Init+0xe8>)
 80007b2:	f002 f8b1 	bl	8002918 <HAL_TIM_ConfigClockSource>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007bc:	f000 fb2c 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c0:	4818      	ldr	r0, [pc, #96]	@ (8000824 <MX_TIM2_Init+0xe8>)
 80007c2:	f001 fe7a 	bl	80024ba <HAL_TIM_PWM_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007cc:	f000 fb24 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	4619      	mov	r1, r3
 80007de:	4811      	ldr	r0, [pc, #68]	@ (8000824 <MX_TIM2_Init+0xe8>)
 80007e0:	f002 fc3a 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007ea:	f000 fb15 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ee:	2360      	movs	r3, #96	@ 0x60
 80007f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80007f2:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80007f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	4807      	ldr	r0, [pc, #28]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000808:	f001 ffc4 	bl	8002794 <HAL_TIM_PWM_ConfigChannel>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000812:	f000 fb01 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000816:	4803      	ldr	r0, [pc, #12]	@ (8000824 <MX_TIM2_Init+0xe8>)
 8000818:	f000 fb62 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 800081c:	bf00      	nop
 800081e:	3738      	adds	r7, #56	@ 0x38
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000090 	.word	0x20000090

08000828 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	@ 0x38
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 0320 	add.w	r3, r7, #32
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000858:	4b38      	ldr	r3, [pc, #224]	@ (800093c <MX_TIM3_Init+0x114>)
 800085a:	4a39      	ldr	r2, [pc, #228]	@ (8000940 <MX_TIM3_Init+0x118>)
 800085c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MX_TIM3_Init+0x114>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_TIM3_Init+0x114>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_TIM3_Init+0x114>)
 800086c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000870:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_TIM3_Init+0x114>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000878:	4b30      	ldr	r3, [pc, #192]	@ (800093c <MX_TIM3_Init+0x114>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800087e:	482f      	ldr	r0, [pc, #188]	@ (800093c <MX_TIM3_Init+0x114>)
 8000880:	f001 fdcc 	bl	800241c <HAL_TIM_Base_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800088a:	f000 fac5 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000898:	4619      	mov	r1, r3
 800089a:	4828      	ldr	r0, [pc, #160]	@ (800093c <MX_TIM3_Init+0x114>)
 800089c:	f002 f83c 	bl	8002918 <HAL_TIM_ConfigClockSource>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80008a6:	f000 fab7 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008aa:	4824      	ldr	r0, [pc, #144]	@ (800093c <MX_TIM3_Init+0x114>)
 80008ac:	f001 fe05 	bl	80024ba <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80008b6:	f000 faaf 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	4619      	mov	r1, r3
 80008c8:	481c      	ldr	r0, [pc, #112]	@ (800093c <MX_TIM3_Init+0x114>)
 80008ca:	f002 fbc5 	bl	8003058 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80008d4:	f000 faa0 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d8:	2360      	movs	r3, #96	@ 0x60
 80008da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80008dc:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80008e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	4812      	ldr	r0, [pc, #72]	@ (800093c <MX_TIM3_Init+0x114>)
 80008f2:	f001 ff4f 	bl	8002794 <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008fc:	f000 fa8c 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2204      	movs	r2, #4
 8000904:	4619      	mov	r1, r3
 8000906:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_TIM3_Init+0x114>)
 8000908:	f001 ff44 	bl	8002794 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000912:	f000 fa81 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2208      	movs	r2, #8
 800091a:	4619      	mov	r1, r3
 800091c:	4807      	ldr	r0, [pc, #28]	@ (800093c <MX_TIM3_Init+0x114>)
 800091e:	f001 ff39 	bl	8002794 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000928:	f000 fa76 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800092c:	4803      	ldr	r0, [pc, #12]	@ (800093c <MX_TIM3_Init+0x114>)
 800092e:	f000 fad7 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000932:	bf00      	nop
 8000934:	3738      	adds	r7, #56	@ 0x38
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000d8 	.word	0x200000d8
 8000940:	40000400 	.word	0x40000400

08000944 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <MX_USART2_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_USART2_UART_Init+0x4c>)
 800097c:	f002 fbda 	bl	8003134 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 fa47 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000120 	.word	0x20000120
 8000994:	40004400 	.word	0x40004400

08000998 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_USART6_UART_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_USART6_UART_Init+0x4c>)
 80009d0:	f002 fbb0 	bl	8003134 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 fa1d 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000168 	.word	0x20000168
 80009e8:	40011400 	.word	0x40011400

080009ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a25      	ldr	r2, [pc, #148]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b23      	ldr	r3, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a1e      	ldr	r2, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0xd4>)
 8000a78:	f001 f81e 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_GPIO_Init+0xd8>)
 8000a94:	f000 fe8c 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a98:	2320      	movs	r3, #32
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xd4>)
 8000ab0:	f000 fe7e 	bl	80017b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : TIM3 PWM Output*/
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3728      	adds	r7, #40	@ 0x28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4803      	ldr	r0, [pc, #12]	@ (8000ae8 <MX_GPIO_LED_ON+0x20>)
 8000ada:	f000 ffed 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020000 	.word	0x40020000

08000aec <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <MX_GPIO_LED_OFF+0x20>)
 8000afe:	f000 ffdb 	bl	8001ab8 <HAL_GPIO_WritePin>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40020000 	.word	0x40020000

08000b10 <bluetooth_Event>:

void bluetooth_Event()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0a4      	sub	sp, #144	@ 0x90
 8000b14:	af02      	add	r7, sp, #8

  int i=0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000b1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b34:	222e      	movs	r2, #46	@ 0x2e
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fe03 	bl	8004744 <memset>
  char sendBuf[CMD_SIZE]={0};
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	222e      	movs	r2, #46	@ 0x2e
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f003 fdfa 	bl	8004744 <memset>
  strcpy(recvBuf,btData);
 8000b50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b54:	495b      	ldr	r1, [pc, #364]	@ (8000cc4 <bluetooth_Event+0x1b4>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f003 fecb 	bl	80048f2 <strcpy>

  printf("btData : %s\r\n",btData);
 8000b5c:	4959      	ldr	r1, [pc, #356]	@ (8000cc4 <bluetooth_Event+0x1b4>)
 8000b5e:	485a      	ldr	r0, [pc, #360]	@ (8000cc8 <bluetooth_Event+0x1b8>)
 8000b60:	f003 fc88 	bl	8004474 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000b64:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b68:	4958      	ldr	r1, [pc, #352]	@ (8000ccc <bluetooth_Event+0x1bc>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fdf2 	bl	8004754 <strtok>
 8000b70:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000b74:	e017      	b.n	8000ba6 <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 8000b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	3388      	adds	r3, #136	@ 0x88
 8000b7e:	443b      	add	r3, r7
 8000b80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b84:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8000b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	dc0a      	bgt.n	8000bb0 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 8000b9a:	494c      	ldr	r1, [pc, #304]	@ (8000ccc <bluetooth_Event+0x1bc>)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f003 fdd9 	bl	8004754 <strtok>
 8000ba2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 8000ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1e3      	bne.n	8000b76 <bluetooth_Event+0x66>
 8000bae:	e000      	b.n	8000bb2 <bluetooth_Event+0xa2>
      break;
 8000bb0:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);

  if(!strcmp(pArray[1],"LED"))
 8000bb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bb4:	4946      	ldr	r1, [pc, #280]	@ (8000cd0 <bluetooth_Event+0x1c0>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb12 	bl	80001e0 <strcmp>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d117      	bne.n	8000bf2 <bluetooth_Event+0xe2>
  {
		if(!strcmp(pArray[2],"ON"))
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc4:	4943      	ldr	r1, [pc, #268]	@ (8000cd4 <bluetooth_Event+0x1c4>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fb0a 	bl	80001e0 <strcmp>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <bluetooth_Event+0xca>
		{
			MX_GPIO_LED_ON(LD2_Pin);
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	f7ff ff78 	bl	8000ac8 <MX_GPIO_LED_ON>
 8000bd8:	e05b      	b.n	8000c92 <bluetooth_Event+0x182>
		}
		else if(!strcmp(pArray[2],"OFF"))
 8000bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bdc:	493e      	ldr	r1, [pc, #248]	@ (8000cd8 <bluetooth_Event+0x1c8>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fafe 	bl	80001e0 <strcmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d153      	bne.n	8000c92 <bluetooth_Event+0x182>
		{
			MX_GPIO_LED_OFF(LD2_Pin);
 8000bea:	2020      	movs	r0, #32
 8000bec:	f7ff ff7e 	bl	8000aec <MX_GPIO_LED_OFF>
 8000bf0:	e04f      	b.n	8000c92 <bluetooth_Event+0x182>
		}
  }
  else if(!strcmp(pArray[1],"SENSOR"))
 8000bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bf4:	4939      	ldr	r1, [pc, #228]	@ (8000cdc <bluetooth_Event+0x1cc>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff faf2 	bl	80001e0 <strcmp>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d13f      	bne.n	8000c82 <bluetooth_Event+0x172>
  {
	  dust = atoi(pArray[2]);
 8000c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 faeb 	bl	80041e0 <atoi>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a34      	ldr	r2, [pc, #208]	@ (8000ce0 <bluetooth_Event+0x1d0>)
 8000c0e:	6013      	str	r3, [r2, #0]
	  humi = atoi(pArray[3]);
 8000c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 fae4 	bl	80041e0 <atoi>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ce4 <bluetooth_Event+0x1d4>)
 8000c1c:	6013      	str	r3, [r2, #0]
	  temp = atoi(pArray[4]);
 8000c1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fadd 	bl	80041e0 <atoi>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce8 <bluetooth_Event+0x1d8>)
 8000c2a:	6013      	str	r3, [r2, #0]

	  // 먼지 값에 따라 RGB LED 색상 설정
	  if (dust <= 25)
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <bluetooth_Event+0x1d0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	dc05      	bgt.n	8000c40 <bluetooth_Event+0x130>
	  {
		  SetRGBColor(0, 0, 255); // 파란색
 8000c34:	22ff      	movs	r2, #255	@ 0xff
 8000c36:	2100      	movs	r1, #0
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fcb1 	bl	80005a0 <SetRGBColor>
 8000c3e:	e00e      	b.n	8000c5e <bluetooth_Event+0x14e>
	  }
	  else if (dust <= 50)
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <bluetooth_Event+0x1d0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b32      	cmp	r3, #50	@ 0x32
 8000c46:	dc05      	bgt.n	8000c54 <bluetooth_Event+0x144>
	  {
	       SetRGBColor(0, 255, 0); // 초록색
 8000c48:	2200      	movs	r2, #0
 8000c4a:	21ff      	movs	r1, #255	@ 0xff
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fca7 	bl	80005a0 <SetRGBColor>
 8000c52:	e004      	b.n	8000c5e <bluetooth_Event+0x14e>
	  }
	  else
	  {
	       SetRGBColor(255, 0, 0); // 빨간색
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	20ff      	movs	r0, #255	@ 0xff
 8000c5a:	f7ff fca1 	bl	80005a0 <SetRGBColor>
	  }

	  // 습도와 온도에 따라 DC 모터 제어
	  if (humi > 50 || temp > 20)
 8000c5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <bluetooth_Event+0x1d4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b32      	cmp	r3, #50	@ 0x32
 8000c64:	dc03      	bgt.n	8000c6e <bluetooth_Event+0x15e>
 8000c66:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <bluetooth_Event+0x1d8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b14      	cmp	r3, #20
 8000c6c:	dd04      	ble.n	8000c78 <bluetooth_Event+0x168>
	  {
		  MOTOR_ON();
 8000c6e:	2100      	movs	r1, #0
 8000c70:	481e      	ldr	r0, [pc, #120]	@ (8000cec <bluetooth_Event+0x1dc>)
 8000c72:	f001 fc7b 	bl	800256c <HAL_TIM_PWM_Start>
	   {
		   MOTOR_OFF();
	   }


      return;
 8000c76:	e021      	b.n	8000cbc <bluetooth_Event+0x1ac>
		   MOTOR_OFF();
 8000c78:	2100      	movs	r1, #0
 8000c7a:	481c      	ldr	r0, [pc, #112]	@ (8000cec <bluetooth_Event+0x1dc>)
 8000c7c:	f001 fd26 	bl	80026cc <HAL_TIM_PWM_Stop>
      return;
 8000c80:	e01c      	b.n	8000cbc <bluetooth_Event+0x1ac>
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 8000c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c84:	491a      	ldr	r1, [pc, #104]	@ (8000cf0 <bluetooth_Event+0x1e0>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff faaa 	bl	80001e0 <strcmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 8000c90:	e014      	b.n	8000cbc <bluetooth_Event+0x1ac>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8000c92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c94:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000c96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c98:	1d38      	adds	r0, r7, #4
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	4915      	ldr	r1, [pc, #84]	@ (8000cf4 <bluetooth_Event+0x1e4>)
 8000ca0:	f003 fc58 	bl	8004554 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff faa4 	bl	80001f4 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	1d39      	adds	r1, r7, #4
 8000cb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb6:	4810      	ldr	r0, [pc, #64]	@ (8000cf8 <bluetooth_Event+0x1e8>)
 8000cb8:	f002 fa8c 	bl	80031d4 <HAL_UART_Transmit>

}
 8000cbc:	3788      	adds	r7, #136	@ 0x88
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	200001e8 	.word	0x200001e8
 8000cc8:	080057c0 	.word	0x080057c0
 8000ccc:	080057d0 	.word	0x080057d0
 8000cd0:	080057d4 	.word	0x080057d4
 8000cd4:	080057d8 	.word	0x080057d8
 8000cd8:	080057dc 	.word	0x080057dc
 8000cdc:	080057e0 	.word	0x080057e0
 8000ce0:	20000084 	.word	0x20000084
 8000ce4:	2000008c 	.word	0x2000008c
 8000ce8:	20000088 	.word	0x20000088
 8000cec:	20000090 	.word	0x20000090
 8000cf0:	080057e8 	.word	0x080057e8
 8000cf4:	080057f8 	.word	0x080057f8
 8000cf8:	20000168 	.word	0x20000168

08000cfc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000d04:	1d39      	adds	r1, r7, #4
 8000d06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4803      	ldr	r0, [pc, #12]	@ (8000d1c <__io_putchar+0x20>)
 8000d0e:	f002 fa61 	bl	80031d4 <HAL_UART_Transmit>

  return ch;
 8000d12:	687b      	ldr	r3, [r7, #4]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000120 	.word	0x20000120

08000d20 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8000de8 <HAL_UART_RxCpltCallback+0xc8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d128      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a2e      	ldr	r2, [pc, #184]	@ (8000df0 <HAL_UART_RxCpltCallback+0xd0>)
 8000d38:	7811      	ldrb	r1, [r2, #0]
 8000d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8000df4 <HAL_UART_RxCpltCallback+0xd4>)
 8000d3c:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2c      	ldr	r2, [pc, #176]	@ (8000df4 <HAL_UART_RxCpltCallback+0xd4>)
 8000d44:	5cd3      	ldrb	r3, [r2, r3]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b0d      	cmp	r3, #13
 8000d4a:	d005      	beq.n	8000d58 <HAL_UART_RxCpltCallback+0x38>
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a29      	ldr	r2, [pc, #164]	@ (8000df8 <HAL_UART_RxCpltCallback+0xd8>)
 8000d52:	5cd3      	ldrb	r3, [r2, r3]
 8000d54:	2b0a      	cmp	r3, #10
 8000d56:	d10b      	bne.n	8000d70 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a25      	ldr	r2, [pc, #148]	@ (8000df4 <HAL_UART_RxCpltCallback+0xd4>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <HAL_UART_RxCpltCallback+0xdc>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000d68:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e004      	b.n	8000d7a <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	3301      	adds	r3, #1
 8000d76:	4a1d      	ldr	r2, [pc, #116]	@ (8000dec <HAL_UART_RxCpltCallback+0xcc>)
 8000d78:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	491c      	ldr	r1, [pc, #112]	@ (8000df0 <HAL_UART_RxCpltCallback+0xd0>)
 8000d7e:	4820      	ldr	r0, [pc, #128]	@ (8000e00 <HAL_UART_RxCpltCallback+0xe0>)
 8000d80:	f002 fab3 	bl	80032ea <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <HAL_UART_RxCpltCallback+0xe4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d127      	bne.n	8000dde <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8000d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_UART_RxCpltCallback+0xec>)
 8000d94:	7811      	ldrb	r1, [r2, #0]
 8000d96:	4a18      	ldr	r2, [pc, #96]	@ (8000df8 <HAL_UART_RxCpltCallback+0xd8>)
 8000d98:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a16      	ldr	r2, [pc, #88]	@ (8000df8 <HAL_UART_RxCpltCallback+0xd8>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d005      	beq.n	8000db2 <HAL_UART_RxCpltCallback+0x92>
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a13      	ldr	r2, [pc, #76]	@ (8000df8 <HAL_UART_RxCpltCallback+0xd8>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	2b0d      	cmp	r3, #13
 8000db0:	d10b      	bne.n	8000dca <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_UART_RxCpltCallback+0xd8>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_UART_RxCpltCallback+0xf0>)
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e004      	b.n	8000dd4 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 8000dca:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <HAL_UART_RxCpltCallback+0xe8>)
 8000dd2:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	490d      	ldr	r1, [pc, #52]	@ (8000e0c <HAL_UART_RxCpltCallback+0xec>)
 8000dd8:	480e      	ldr	r0, [pc, #56]	@ (8000e14 <HAL_UART_RxCpltCallback+0xf4>)
 8000dda:	f002 fa86 	bl	80032ea <HAL_UART_Receive_IT>
    }
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40004400 	.word	0x40004400
 8000dec:	2000021c 	.word	0x2000021c
 8000df0:	200001b0 	.word	0x200001b0
 8000df4:	200001b4 	.word	0x200001b4
 8000df8:	200001e8 	.word	0x200001e8
 8000dfc:	200001b1 	.word	0x200001b1
 8000e00:	20000120 	.word	0x20000120
 8000e04:	40011400 	.word	0x40011400
 8000e08:	20000220 	.word	0x20000220
 8000e0c:	200001e7 	.word	0x200001e7
 8000e10:	200001e6 	.word	0x200001e6
 8000e14:	20000168 	.word	0x20000168

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <Error_Handler+0x8>

08000e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e62:	2007      	movs	r0, #7
 8000e64:	f000 fbd0 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e84:	d10e      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ea2:	e012      	b.n	8000eca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <HAL_TIM_Base_MspInit+0x68>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10d      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_TIM_Base_MspInit+0x64>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40000400 	.word	0x40000400

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	@ 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f00:	d11e      	bne.n	8000f40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b31      	ldr	r3, [pc, #196]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4a30      	ldr	r2, [pc, #192]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4b2e      	ldr	r3, [pc, #184]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f3a:	f000 fc39 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f3e:	e040      	b.n	8000fc2 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <HAL_TIM_MspPostInit+0xf4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d13b      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a1e      	ldr	r2, [pc, #120]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a17      	ldr	r2, [pc, #92]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f92:	2302      	movs	r3, #2
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f9e:	f000 fc07 	bl	80017b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4806      	ldr	r0, [pc, #24]	@ (8000fd8 <HAL_TIM_MspPostInit+0xf8>)
 8000fbe:	f000 fbf7 	bl	80017b0 <HAL_GPIO_Init>
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	@ 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40020400 	.word	0x40020400

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	@ 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80010e4 <HAL_UART_MspInit+0x108>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d134      	bne.n	8001068 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	4b39      	ldr	r3, [pc, #228]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a38      	ldr	r2, [pc, #224]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b36      	ldr	r3, [pc, #216]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	4b32      	ldr	r3, [pc, #200]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a31      	ldr	r2, [pc, #196]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b2f      	ldr	r3, [pc, #188]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001036:	230c      	movs	r3, #12
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001046:	2307      	movs	r3, #7
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4826      	ldr	r0, [pc, #152]	@ (80010ec <HAL_UART_MspInit+0x110>)
 8001052:	f000 fbad 	bl	80017b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2026      	movs	r0, #38	@ 0x26
 800105c:	f000 fadf 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001060:	2026      	movs	r0, #38	@ 0x26
 8001062:	f000 faf8 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001066:	e038      	b.n	80010da <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a20      	ldr	r2, [pc, #128]	@ (80010f0 <HAL_UART_MspInit+0x114>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d133      	bne.n	80010da <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a14      	ldr	r2, [pc, #80]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_UART_MspInit+0x10c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010aa:	23c0      	movs	r3, #192	@ 0xc0
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80010ba:	2308      	movs	r3, #8
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	480b      	ldr	r0, [pc, #44]	@ (80010f4 <HAL_UART_MspInit+0x118>)
 80010c6:	f000 fb73 	bl	80017b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2047      	movs	r0, #71	@ 0x47
 80010d0:	f000 faa5 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80010d4:	2047      	movs	r0, #71	@ 0x47
 80010d6:	f000 fabe 	bl	8001656 <HAL_NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3730      	adds	r7, #48	@ 0x30
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40011400 	.word	0x40011400
 80010f4:	40020800 	.word	0x40020800

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114e:	f000 f96b 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USART2_IRQHandler+0x10>)
 800115e:	f002 f8e9 	bl	8003334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000120 	.word	0x20000120

0800116c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <USART6_IRQHandler+0x10>)
 8001172:	f002 f8df 	bl	8003334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000168 	.word	0x20000168

08001180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return 1;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_kill>:

int _kill(int pid, int sig)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800119a:	f003 fb7d 	bl	8004898 <__errno>
 800119e:	4603      	mov	r3, r0
 80011a0:	2216      	movs	r2, #22
 80011a2:	601a      	str	r2, [r3, #0]
  return -1;
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_exit>:

void _exit (int status)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f7ff ffe7 	bl	8001190 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011c2:	bf00      	nop
 80011c4:	e7fd      	b.n	80011c2 <_exit+0x12>

080011c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e00a      	b.n	80011ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d8:	f3af 8000 	nop.w
 80011dc:	4601      	mov	r1, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	60ba      	str	r2, [r7, #8]
 80011e4:	b2ca      	uxtb	r2, r1
 80011e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	dbf0      	blt.n	80011d8 <_read+0x12>
  }

  return len;
 80011f6:	687b      	ldr	r3, [r7, #4]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e009      	b.n	8001226 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	60ba      	str	r2, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff fd6e 	bl	8000cfc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf1      	blt.n	8001212 <_write+0x12>
  }
  return len;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_close>:

int _close(int file)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	605a      	str	r2, [r3, #4]
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_isatty>:

int _isatty(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	@ (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f003 fae2 	bl	8004898 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	@ (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20020000 	.word	0x20020000
 8001300:	00000400 	.word	0x00000400
 8001304:	20000224 	.word	0x20000224
 8001308:	20000378 	.word	0x20000378

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001368 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001334:	f7ff ffea 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	@ (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	@ (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	@ (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f003 faa1 	bl	80048a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f93b 	bl	80005dc <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001374:	08005a10 	.word	0x08005a10
  ldr r2, =_sbss
 8001378:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800137c:	20000378 	.word	0x20000378

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	@ (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f92b 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd34 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f943 	bl	8001672 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f90b 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	@ (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000228 	.word	0x20000228

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	@ (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000228 	.word	0x20000228

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	@ (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	@ (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	@ (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	@ 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	@ 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	@ (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001696:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001698:	f7ff feda 	bl	8001450 <HAL_GetTick>
 800169c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d008      	beq.n	80016bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e052      	b.n	8001762 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0216 	bic.w	r2, r2, #22
 80016ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_DMA_Abort+0x62>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0208 	bic.w	r2, r2, #8
 80016fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0201 	bic.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170c:	e013      	b.n	8001736 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800170e:	f7ff fe9f 	bl	8001450 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b05      	cmp	r3, #5
 800171a:	d90c      	bls.n	8001736 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2220      	movs	r2, #32
 8001720:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e015      	b.n	8001762 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e4      	bne.n	800170e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	223f      	movs	r2, #63	@ 0x3f
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d004      	beq.n	8001788 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2280      	movs	r2, #128	@ 0x80
 8001782:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00c      	b.n	80017a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2205      	movs	r2, #5
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	@ 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e159      	b.n	8001a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8148 	bne.w	8001a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a2 	beq.w	8001a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193e:	4a56      	ldr	r2, [pc, #344]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001944:	6453      	str	r3, [r2, #68]	@ 0x44
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_GPIO_Init+0x2ec>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a49      	ldr	r2, [pc, #292]	@ (8001aa0 <HAL_GPIO_Init+0x2f0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x202>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a48      	ldr	r2, [pc, #288]	@ (8001aa4 <HAL_GPIO_Init+0x2f4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x1fe>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a47      	ldr	r2, [pc, #284]	@ (8001aa8 <HAL_GPIO_Init+0x2f8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x1fa>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a46      	ldr	r2, [pc, #280]	@ (8001aac <HAL_GPIO_Init+0x2fc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x1f6>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a45      	ldr	r2, [pc, #276]	@ (8001ab0 <HAL_GPIO_Init+0x300>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x1f2>
 800199e:	2304      	movs	r3, #4
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x204>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	@ (8001a9c <HAL_GPIO_Init+0x2ec>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b38      	ldr	r3, [pc, #224]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a24      	ldr	r2, [pc, #144]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b18      	ldr	r3, [pc, #96]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f aea2 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e267      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	4b88      	ldr	r3, [pc, #544]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4b85      	ldr	r3, [pc, #532]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b82      	ldr	r3, [pc, #520]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b7e      	ldr	r3, [pc, #504]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e242      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b76      	ldr	r3, [pc, #472]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a75      	ldr	r2, [pc, #468]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b70      	ldr	r3, [pc, #448]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6f      	ldr	r2, [pc, #444]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b6d      	ldr	r3, [pc, #436]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a6c      	ldr	r2, [pc, #432]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b69      	ldr	r3, [pc, #420]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a68      	ldr	r2, [pc, #416]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a65      	ldr	r2, [pc, #404]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc54 	bl	8001450 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fc50 	bl	8001450 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e207      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fc40 	bl	8001450 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc3c 	bl	8001450 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	@ 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f3      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b51      	ldr	r3, [pc, #324]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c7      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4937      	ldr	r1, [pc, #220]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fbf5 	bl	8001450 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fbf1 	bl	8001450 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a8      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4925      	ldr	r1, [pc, #148]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_RCC_OscConfig+0x244>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fbd4 	bl	8001450 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fbd0 	bl	8001450 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e187      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d036      	beq.n	8001d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbb4 	bl	8001450 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbb0 	bl	8001450 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e167      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <HAL_RCC_OscConfig+0x240>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e01b      	b.n	8001d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b09      	ldr	r3, [pc, #36]	@ (8001d34 <HAL_RCC_OscConfig+0x248>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fb9d 	bl	8001450 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e00e      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fb99 	bl	8001450 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d907      	bls.n	8001d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e150      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b88      	ldr	r3, [pc, #544]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ea      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 8097 	beq.w	8001e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b81      	ldr	r3, [pc, #516]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b7d      	ldr	r3, [pc, #500]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d72:	4b7a      	ldr	r3, [pc, #488]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b77      	ldr	r3, [pc, #476]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d118      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b74      	ldr	r3, [pc, #464]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001d94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff fb59 	bl	8001450 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da2:	f7ff fb55 	bl	8001450 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e10c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f60 <HAL_RCC_OscConfig+0x474>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2ea>
 8001dc8:	4b64      	ldr	r3, [pc, #400]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd4:	e01c      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x30c>
 8001dde:	4b5f      	ldr	r3, [pc, #380]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dea:	4b5c      	ldr	r3, [pc, #368]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dee:	4a5b      	ldr	r2, [pc, #364]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x324>
 8001df8:	4b58      	ldr	r3, [pc, #352]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfc:	4a57      	ldr	r2, [pc, #348]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e04:	4b55      	ldr	r3, [pc, #340]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e08:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 0304 	bic.w	r3, r3, #4
 8001e0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d015      	beq.n	8001e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fb1a 	bl	8001450 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fb16 	bl	8001450 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0cb      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e36:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0ee      	beq.n	8001e20 <HAL_RCC_OscConfig+0x334>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e44:	f7ff fb04 	bl	8001450 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4a:	e00a      	b.n	8001e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fb00 	bl	8001450 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0b5      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e62:	4b3e      	ldr	r3, [pc, #248]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1ee      	bne.n	8001e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d105      	bne.n	8001e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e74:	4b39      	ldr	r3, [pc, #228]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	4a38      	ldr	r2, [pc, #224]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a1 	beq.w	8001fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e8a:	4b34      	ldr	r3, [pc, #208]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d05c      	beq.n	8001f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d141      	bne.n	8001f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fad4 	bl	8001450 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fad0 	bl	8001450 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e087      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	019b      	lsls	r3, r3, #6
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee0:	085b      	lsrs	r3, r3, #1
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	041b      	lsls	r3, r3, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	491b      	ldr	r1, [pc, #108]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efa:	f7ff faa9 	bl	8001450 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f02:	f7ff faa5 	bl	8001450 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e05c      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x416>
 8001f20:	e054      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <HAL_RCC_OscConfig+0x478>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa92 	bl	8001450 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff fa8e 	bl	8001450 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e045      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f42:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_RCC_OscConfig+0x470>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x444>
 8001f4e:	e03d      	b.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e038      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d028      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d121      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f98:	4013      	ands	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f9c0 	bl	8001450 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f9bc 	bl	8001450 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	@ (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	@ (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f920 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	08005804 	.word	0x08005804
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ac:	b094      	sub	sp, #80	@ 0x50
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b4:	2300      	movs	r3, #0
 80021b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021b8:	2300      	movs	r3, #0
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b79      	ldr	r3, [pc, #484]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80e1 	bhi.w	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e0db      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80021e0:	e0db      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b73      	ldr	r3, [pc, #460]	@ (80023b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80021e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e6:	e0d8      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b6f      	ldr	r3, [pc, #444]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b6d      	ldr	r3, [pc, #436]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b6a      	ldr	r3, [pc, #424]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	2200      	movs	r2, #0
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
 8002216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800221a:	4622      	mov	r2, r4
 800221c:	462b      	mov	r3, r5
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0159      	lsls	r1, r3, #5
 8002228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222c:	0150      	lsls	r0, r2, #5
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4621      	mov	r1, r4
 8002234:	1a51      	subs	r1, r2, r1
 8002236:	6139      	str	r1, [r7, #16]
 8002238:	4629      	mov	r1, r5
 800223a:	eb63 0301 	sbc.w	r3, r3, r1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224c:	4659      	mov	r1, fp
 800224e:	018b      	lsls	r3, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002256:	4651      	mov	r1, sl
 8002258:	018a      	lsls	r2, r1, #6
 800225a:	4651      	mov	r1, sl
 800225c:	ebb2 0801 	subs.w	r8, r2, r1
 8002260:	4659      	mov	r1, fp
 8002262:	eb63 0901 	sbc.w	r9, r3, r1
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227a:	4690      	mov	r8, r2
 800227c:	4699      	mov	r9, r3
 800227e:	4623      	mov	r3, r4
 8002280:	eb18 0303 	adds.w	r3, r8, r3
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	462b      	mov	r3, r5
 8002288:	eb49 0303 	adc.w	r3, r9, r3
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800229a:	4629      	mov	r1, r5
 800229c:	024b      	lsls	r3, r1, #9
 800229e:	4621      	mov	r1, r4
 80022a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022a4:	4621      	mov	r1, r4
 80022a6:	024a      	lsls	r2, r1, #9
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	2200      	movs	r2, #0
 80022b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022b8:	f7fd fffa 	bl	80002b0 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022c4:	e058      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	2200      	movs	r2, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	4611      	mov	r1, r2
 80022d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	@ 0x24
 80022dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022e0:	4642      	mov	r2, r8
 80022e2:	464b      	mov	r3, r9
 80022e4:	f04f 0000 	mov.w	r0, #0
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	0159      	lsls	r1, r3, #5
 80022ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022f2:	0150      	lsls	r0, r2, #5
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4641      	mov	r1, r8
 80022fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80022fe:	4649      	mov	r1, r9
 8002300:	eb63 0b01 	sbc.w	fp, r3, r1
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002318:	ebb2 040a 	subs.w	r4, r2, sl
 800231c:	eb63 050b 	sbc.w	r5, r3, fp
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	00eb      	lsls	r3, r5, #3
 800232a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800232e:	00e2      	lsls	r2, r4, #3
 8002330:	4614      	mov	r4, r2
 8002332:	461d      	mov	r5, r3
 8002334:	4643      	mov	r3, r8
 8002336:	18e3      	adds	r3, r4, r3
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	464b      	mov	r3, r9
 800233c:	eb45 0303 	adc.w	r3, r5, r3
 8002340:	607b      	str	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800234e:	4629      	mov	r1, r5
 8002350:	028b      	lsls	r3, r1, #10
 8002352:	4621      	mov	r1, r4
 8002354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002358:	4621      	mov	r1, r4
 800235a:	028a      	lsls	r2, r1, #10
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002362:	2200      	movs	r2, #0
 8002364:	61bb      	str	r3, [r7, #24]
 8002366:	61fa      	str	r2, [r7, #28]
 8002368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236c:	f7fd ffa0 	bl	80002b0 <__aeabi_uldivmod>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4613      	mov	r3, r2
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	3301      	adds	r3, #1
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800238a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800238c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002392:	e002      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800239a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800239c:	4618      	mov	r0, r3
 800239e:	3750      	adds	r7, #80	@ 0x50
 80023a0:	46bd      	mov	sp, r7
 80023a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000000 	.word	0x20000000

080023cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d0:	f7ff fff0 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0a9b      	lsrs	r3, r3, #10
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08005814 	.word	0x08005814

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	0b5b      	lsrs	r3, r3, #13
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800240a:	5ccb      	ldrb	r3, [r1, r3]
 800240c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002410:	4618      	mov	r0, r3
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	08005814 	.word	0x08005814

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e041      	b.n	80024b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fd16 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 fb24 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e041      	b.n	8002550 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f839 	bl	8002558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f000 fad5 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x24>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e022      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d109      	bne.n	80025aa <HAL_TIM_PWM_Start+0x3e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e015      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d109      	bne.n	80025c4 <HAL_TIM_PWM_Start+0x58>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e068      	b.n	80026b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ec:	e013      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x92>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025fc:	e00b      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800260c:	e003      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fcf4 	bl	800300c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a23      	ldr	r2, [pc, #140]	@ (80026b8 <HAL_TIM_PWM_Start+0x14c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d107      	bne.n	800263e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800263c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1d      	ldr	r2, [pc, #116]	@ (80026b8 <HAL_TIM_PWM_Start+0x14c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d018      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d013      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a19      	ldr	r2, [pc, #100]	@ (80026bc <HAL_TIM_PWM_Start+0x150>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d00e      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <HAL_TIM_PWM_Start+0x154>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a16      	ldr	r2, [pc, #88]	@ (80026c4 <HAL_TIM_PWM_Start+0x158>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d004      	beq.n	800267a <HAL_TIM_PWM_Start+0x10e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a14      	ldr	r2, [pc, #80]	@ (80026c8 <HAL_TIM_PWM_Start+0x15c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d010      	beq.n	80026ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e007      	b.n	80026ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40010000 	.word	0x40010000
 80026bc:	40000400 	.word	0x40000400
 80026c0:	40000800 	.word	0x40000800
 80026c4:	40000c00 	.word	0x40000c00
 80026c8:	40014000 	.word	0x40014000

080026cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fc94 	bl	800300c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a29      	ldr	r2, [pc, #164]	@ (8002790 <HAL_TIM_PWM_Stop+0xc4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d117      	bne.n	800271e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <HAL_TIM_PWM_Stop+0x52>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	f240 4344 	movw	r3, #1092	@ 0x444
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d107      	bne.n	800271e <HAL_TIM_PWM_Stop+0x52>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002728:	4013      	ands	r3, r2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_TIM_PWM_Stop+0x82>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	f240 4344 	movw	r3, #1092	@ 0x444
 8002738:	4013      	ands	r3, r2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d107      	bne.n	800274e <HAL_TIM_PWM_Stop+0x82>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d104      	bne.n	800275e <HAL_TIM_PWM_Stop+0x92>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800275c:	e013      	b.n	8002786 <HAL_TIM_PWM_Stop+0xba>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b04      	cmp	r3, #4
 8002762:	d104      	bne.n	800276e <HAL_TIM_PWM_Stop+0xa2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800276c:	e00b      	b.n	8002786 <HAL_TIM_PWM_Stop+0xba>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b08      	cmp	r3, #8
 8002772:	d104      	bne.n	800277e <HAL_TIM_PWM_Stop+0xb2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800277c:	e003      	b.n	8002786 <HAL_TIM_PWM_Stop+0xba>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40010000 	.word	0x40010000

08002794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027a0:	2300      	movs	r3, #0
 80027a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0ae      	b.n	8002910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	f200 809f 	bhi.w	8002900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027c2:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	08002901 	.word	0x08002901
 80027d0:	08002901 	.word	0x08002901
 80027d4:	08002901 	.word	0x08002901
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	08002901 	.word	0x08002901
 80027e0:	08002901 	.word	0x08002901
 80027e4:	08002901 	.word	0x08002901
 80027e8:	0800287f 	.word	0x0800287f
 80027ec:	08002901 	.word	0x08002901
 80027f0:	08002901 	.word	0x08002901
 80027f4:	08002901 	.word	0x08002901
 80027f8:	080028bf 	.word	0x080028bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 f9dc 	bl	8002bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0208 	orr.w	r2, r2, #8
 8002816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0204 	bic.w	r2, r2, #4
 8002826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	691a      	ldr	r2, [r3, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	619a      	str	r2, [r3, #24]
      break;
 800283a:	e064      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fa22 	bl	8002c8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	021a      	lsls	r2, r3, #8
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	619a      	str	r2, [r3, #24]
      break;
 800287c:	e043      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fa6d 	bl	8002d64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0208 	orr.w	r2, r2, #8
 8002898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0204 	bic.w	r2, r2, #4
 80028a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	61da      	str	r2, [r3, #28]
      break;
 80028bc:	e023      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fab7 	bl	8002e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	021a      	lsls	r2, r3, #8
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	61da      	str	r2, [r3, #28]
      break;
 80028fe:	e002      	b.n	8002906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	75fb      	strb	r3, [r7, #23]
      break;
 8002904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIM_ConfigClockSource+0x1c>
 8002930:	2302      	movs	r3, #2
 8002932:	e0b4      	b.n	8002a9e <HAL_TIM_ConfigClockSource+0x186>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800295a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296c:	d03e      	beq.n	80029ec <HAL_TIM_ConfigClockSource+0xd4>
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002972:	f200 8087 	bhi.w	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297a:	f000 8086 	beq.w	8002a8a <HAL_TIM_ConfigClockSource+0x172>
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002982:	d87f      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b70      	cmp	r3, #112	@ 0x70
 8002986:	d01a      	beq.n	80029be <HAL_TIM_ConfigClockSource+0xa6>
 8002988:	2b70      	cmp	r3, #112	@ 0x70
 800298a:	d87b      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b60      	cmp	r3, #96	@ 0x60
 800298e:	d050      	beq.n	8002a32 <HAL_TIM_ConfigClockSource+0x11a>
 8002990:	2b60      	cmp	r3, #96	@ 0x60
 8002992:	d877      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b50      	cmp	r3, #80	@ 0x50
 8002996:	d03c      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0xfa>
 8002998:	2b50      	cmp	r3, #80	@ 0x50
 800299a:	d873      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d058      	beq.n	8002a52 <HAL_TIM_ConfigClockSource+0x13a>
 80029a0:	2b40      	cmp	r3, #64	@ 0x40
 80029a2:	d86f      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b30      	cmp	r3, #48	@ 0x30
 80029a6:	d064      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x15a>
 80029a8:	2b30      	cmp	r3, #48	@ 0x30
 80029aa:	d86b      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d060      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x15a>
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d867      	bhi.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d05c      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d05a      	beq.n	8002a72 <HAL_TIM_ConfigClockSource+0x15a>
 80029bc:	e062      	b.n	8002a84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ce:	f000 fafd 	bl	8002fcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	609a      	str	r2, [r3, #8]
      break;
 80029ea:	e04f      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029fc:	f000 fae6 	bl	8002fcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a0e:	609a      	str	r2, [r3, #8]
      break;
 8002a10:	e03c      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f000 fa5a 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2150      	movs	r1, #80	@ 0x50
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 fab3 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a30:	e02c      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f000 fa79 	bl	8002f36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2160      	movs	r1, #96	@ 0x60
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 faa3 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a50:	e01c      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f000 fa3a 	bl	8002ed8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2140      	movs	r1, #64	@ 0x40
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fa93 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a70:	e00c      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	f000 fa8a 	bl	8002f96 <TIM_ITRx_SetConfig>
      break;
 8002a82:	e003      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      break;
 8002a88:	e000      	b.n	8002a8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <TIM_Base_SetConfig+0xfc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00f      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a37      	ldr	r2, [pc, #220]	@ (8002ba8 <TIM_Base_SetConfig+0x100>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a36      	ldr	r2, [pc, #216]	@ (8002bac <TIM_Base_SetConfig+0x104>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a35      	ldr	r2, [pc, #212]	@ (8002bb0 <TIM_Base_SetConfig+0x108>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ba4 <TIM_Base_SetConfig+0xfc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01b      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b00:	d017      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a28      	ldr	r2, [pc, #160]	@ (8002ba8 <TIM_Base_SetConfig+0x100>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a27      	ldr	r2, [pc, #156]	@ (8002bac <TIM_Base_SetConfig+0x104>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a26      	ldr	r2, [pc, #152]	@ (8002bb0 <TIM_Base_SetConfig+0x108>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	@ (8002bb4 <TIM_Base_SetConfig+0x10c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a24      	ldr	r2, [pc, #144]	@ (8002bb8 <TIM_Base_SetConfig+0x110>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <TIM_Base_SetConfig+0x114>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba4 <TIM_Base_SetConfig+0xfc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d105      	bne.n	8002b96 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]
  }
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40000400 	.word	0x40000400
 8002bac:	40000800 	.word	0x40000800
 8002bb0:	40000c00 	.word	0x40000c00
 8002bb4:	40014000 	.word	0x40014000
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800

08002bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	f023 0201 	bic.w	r2, r3, #1
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 0302 	bic.w	r3, r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1c      	ldr	r2, [pc, #112]	@ (8002c88 <TIM_OC1_SetConfig+0xc8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10c      	bne.n	8002c36 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0308 	bic.w	r3, r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <TIM_OC1_SetConfig+0xc8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40010000 	.word	0x40010000

08002c8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f023 0210 	bic.w	r2, r3, #16
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0320 	bic.w	r3, r3, #32
 8002cd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <TIM_OC2_SetConfig+0xd4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10d      	bne.n	8002d08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a15      	ldr	r2, [pc, #84]	@ (8002d60 <TIM_OC2_SetConfig+0xd4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d113      	bne.n	8002d38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	621a      	str	r2, [r3, #32]
}
 8002d52:	bf00      	nop
 8002d54:	371c      	adds	r7, #28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40010000 	.word	0x40010000

08002d64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e34 <TIM_OC3_SetConfig+0xd0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d10d      	bne.n	8002dde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <TIM_OC3_SetConfig+0xd0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d113      	bne.n	8002e0e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	621a      	str	r2, [r3, #32]
}
 8002e28:	bf00      	nop
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40010000 	.word	0x40010000

08002e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	031b      	lsls	r3, r3, #12
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <TIM_OC4_SetConfig+0x9c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d109      	bne.n	8002eac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	019b      	lsls	r3, r3, #6
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000

08002ed8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	f023 0201 	bic.w	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f023 030a 	bic.w	r3, r3, #10
 8002f14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	031b      	lsls	r3, r3, #12
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002f72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	621a      	str	r2, [r3, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	371c      	adds	r7, #28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f043 0307 	orr.w	r3, r3, #7
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b087      	sub	sp, #28
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	609a      	str	r2, [r3, #8]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2201      	movs	r2, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800306c:	2302      	movs	r3, #2
 800306e:	e050      	b.n	8003112 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030bc:	d013      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a15      	ldr	r2, [pc, #84]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d10c      	bne.n	8003100 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40014000 	.word	0x40014000

08003134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e042      	b.n	80031cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd ff3e 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	@ 0x24
 8003164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fdbd 	bl	8003cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691a      	ldr	r2, [r3, #16]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800318c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695a      	ldr	r2, [r3, #20]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800319c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	@ 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d175      	bne.n	80032e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_UART_Transmit+0x2c>
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e06e      	b.n	80032e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2221      	movs	r2, #33	@ 0x21
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003212:	f7fe f91d 	bl	8001450 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	88fa      	ldrh	r2, [r7, #6]
 800321c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	88fa      	ldrh	r2, [r7, #6]
 8003222:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322c:	d108      	bne.n	8003240 <HAL_UART_Transmit+0x6c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d104      	bne.n	8003240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e003      	b.n	8003248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003248:	e02e      	b.n	80032a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2200      	movs	r2, #0
 8003252:	2180      	movs	r1, #128	@ 0x80
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fb1f 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e03a      	b.n	80032e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10b      	bne.n	800328a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	3302      	adds	r3, #2
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	e007      	b.n	800329a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	781a      	ldrb	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3301      	adds	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1cb      	bne.n	800324a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	2200      	movs	r2, #0
 80032ba:	2140      	movs	r1, #64	@ 0x40
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 faeb 	bl	8003898 <UART_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e006      	b.n	80032e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	4613      	mov	r3, r2
 80032f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b20      	cmp	r3, #32
 8003302:	d112      	bne.n	800332a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_UART_Receive_IT+0x26>
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e00b      	b.n	800332c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	461a      	mov	r2, r3
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fb12 	bl	800394a <UART_Start_Receive_IT>
 8003326:	4603      	mov	r3, r0
 8003328:	e000      	b.n	800332c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b0ba      	sub	sp, #232	@ 0xe8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003360:	2300      	movs	r3, #0
 8003362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HAL_UART_IRQHandler+0x66>
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fbf2 	bl	8003b7c <UART_Receive_IT>
      return;
 8003398:	e25b      	b.n	8003852 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800339a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 80de 	beq.w	8003560 <HAL_UART_IRQHandler+0x22c>
 80033a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80d1 	beq.w	8003560 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_UART_IRQHandler+0xae>
 80033ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00b      	beq.n	8003406 <HAL_UART_IRQHandler+0xd2>
 80033ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d005      	beq.n	8003406 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fe:	f043 0202 	orr.w	r2, r3, #2
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00b      	beq.n	800342a <HAL_UART_IRQHandler+0xf6>
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d011      	beq.n	800345a <HAL_UART_IRQHandler+0x126>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	f043 0208 	orr.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 81f2 	beq.w	8003848 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_UART_IRQHandler+0x14e>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fb7d 	bl	8003b7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	bf0c      	ite	eq
 8003490:	2301      	moveq	r3, #1
 8003492:	2300      	movne	r3, #0
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_UART_IRQHandler+0x17a>
 80034a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d04f      	beq.n	800354e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa85 	bl	80039be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b40      	cmp	r3, #64	@ 0x40
 80034c0:	d141      	bne.n	8003546 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3314      	adds	r3, #20
 80034c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80034fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1d9      	bne.n	80034c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	4a7e      	ldr	r2, [pc, #504]	@ (8003714 <HAL_UART_IRQHandler+0x3e0>)
 800351c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe f921 	bl	800176a <HAL_DMA_Abort_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003538:	4610      	mov	r0, r2
 800353a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	e00e      	b.n	800355c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f994 	bl	800386c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e00a      	b.n	800355c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f990 	bl	800386c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e006      	b.n	800355c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f98c 	bl	800386c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800355a:	e175      	b.n	8003848 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	bf00      	nop
    return;
 800355e:	e173      	b.n	8003848 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 814f 	bne.w	8003808 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8148 	beq.w	8003808 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8141 	beq.w	8003808 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a6:	2b40      	cmp	r3, #64	@ 0x40
 80035a8:	f040 80b6 	bne.w	8003718 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 8145 	beq.w	800384c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035ca:	429a      	cmp	r2, r3
 80035cc:	f080 813e 	bcs.w	800384c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e2:	f000 8088 	beq.w	80036f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80035fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	330c      	adds	r3, #12
 800360e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800361e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003622:	e841 2300 	strex	r3, r2, [r1]
 8003626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800362a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1d9      	bne.n	80035e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3314      	adds	r3, #20
 8003638:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800363c:	e853 3f00 	ldrex	r3, [r3]
 8003640:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3314      	adds	r3, #20
 8003652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003656:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800365a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800365e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e1      	bne.n	8003632 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3314      	adds	r3, #20
 8003674:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800367e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003692:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003694:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003698:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e3      	bne.n	800366e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036be:	e853 3f00 	ldrex	r3, [r3]
 80036c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	330c      	adds	r3, #12
 80036d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e3      	bne.n	80036b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd ffca 	bl	800168a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003704:	b29b      	uxth	r3, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	b29b      	uxth	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f8b7 	bl	8003880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003712:	e09b      	b.n	800384c <HAL_UART_IRQHandler+0x518>
 8003714:	08003a85 	.word	0x08003a85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003720:	b29b      	uxth	r3, r3
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 808e 	beq.w	8003850 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 8089 	beq.w	8003850 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	330c      	adds	r3, #12
 8003744:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800374e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003762:	647a      	str	r2, [r7, #68]	@ 0x44
 8003764:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003768:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e3      	bne.n	800373e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	3314      	adds	r3, #20
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	e853 3f00 	ldrex	r3, [r3]
 8003784:	623b      	str	r3, [r7, #32]
   return(result);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3314      	adds	r3, #20
 8003796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800379a:	633a      	str	r2, [r7, #48]	@ 0x30
 800379c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e3      	bne.n	8003776 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0310 	bic.w	r3, r3, #16
 80037d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037e0:	61fa      	str	r2, [r7, #28]
 80037e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	69b9      	ldr	r1, [r7, #24]
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	617b      	str	r3, [r7, #20]
   return(result);
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037fe:	4619      	mov	r1, r3
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f83d 	bl	8003880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003806:	e023      	b.n	8003850 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800380c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <HAL_UART_IRQHandler+0x4f4>
 8003814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f943 	bl	8003aac <UART_Transmit_IT>
    return;
 8003826:	e014      	b.n	8003852 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00e      	beq.n	8003852 <HAL_UART_IRQHandler+0x51e>
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f983 	bl	8003b4c <UART_EndTransmit_IT>
    return;
 8003846:	e004      	b.n	8003852 <HAL_UART_IRQHandler+0x51e>
    return;
 8003848:	bf00      	nop
 800384a:	e002      	b.n	8003852 <HAL_UART_IRQHandler+0x51e>
      return;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <HAL_UART_IRQHandler+0x51e>
      return;
 8003850:	bf00      	nop
  }
}
 8003852:	37e8      	adds	r7, #232	@ 0xe8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038a8:	e03b      	b.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d037      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fd fdcd 	bl	8001450 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	6a3a      	ldr	r2, [r7, #32]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e03a      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d023      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b80      	cmp	r3, #128	@ 0x80
 80038de:	d020      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d01d      	beq.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d116      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f857 	bl	80039be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2208      	movs	r2, #8
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e00f      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d0b4      	beq.n	80038aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	88fa      	ldrh	r2, [r7, #6]
 8003962:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2222      	movs	r2, #34	@ 0x22
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800398e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0220 	orr.w	r2, r2, #32
 80039ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b095      	sub	sp, #84	@ 0x54
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	330c      	adds	r3, #12
 80039e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80039e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f023 0301 	bic.w	r3, r3, #1
 8003a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e5      	bne.n	80039fa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d119      	bne.n	8003a6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	e853 3f00 	ldrex	r3, [r3]
 8003a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f023 0310 	bic.w	r3, r3, #16
 8003a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a56:	61ba      	str	r2, [r7, #24]
 8003a58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6979      	ldr	r1, [r7, #20]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	613b      	str	r3, [r7, #16]
   return(result);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e5      	bne.n	8003a36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a78:	bf00      	nop
 8003a7a:	3754      	adds	r7, #84	@ 0x54
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f7ff fee4 	bl	800386c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b21      	cmp	r3, #33	@ 0x21
 8003abe:	d13e      	bne.n	8003b3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ac8:	d114      	bne.n	8003af4 <UART_Transmit_IT+0x48>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d110      	bne.n	8003af4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ae6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	621a      	str	r2, [r3, #32]
 8003af2:	e008      	b.n	8003b06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	1c59      	adds	r1, r3, #1
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6211      	str	r1, [r2, #32]
 8003afe:	781a      	ldrb	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4619      	mov	r1, r3
 8003b14:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
  }
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fe73 	bl	8003858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	@ 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b22      	cmp	r3, #34	@ 0x22
 8003b8e:	f040 80ae 	bne.w	8003cee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b9a:	d117      	bne.n	8003bcc <UART_Receive_IT+0x50>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d113      	bne.n	8003bcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bca:	e026      	b.n	8003c1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bde:	d007      	beq.n	8003bf0 <UART_Receive_IT+0x74>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <UART_Receive_IT+0x82>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e008      	b.n	8003c10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4619      	mov	r1, r3
 8003c28:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d15d      	bne.n	8003cea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0220 	bic.w	r2, r2, #32
 8003c3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d135      	bne.n	8003ce0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c9a:	623a      	str	r2, [r7, #32]
 8003c9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	69f9      	ldr	r1, [r7, #28]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d10a      	bne.n	8003cd2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff fdd1 	bl	8003880 <HAL_UARTEx_RxEventCallback>
 8003cde:	e002      	b.n	8003ce6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fd f81d 	bl	8000d20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	e002      	b.n	8003cf0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e000      	b.n	8003cf0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3730      	adds	r7, #48	@ 0x30
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b0c0      	sub	sp, #256	@ 0x100
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d14:	68d9      	ldr	r1, [r3, #12]
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	ea40 0301 	orr.w	r3, r0, r1
 8003d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d50:	f021 010c 	bic.w	r1, r1, #12
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	6999      	ldr	r1, [r3, #24]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	ea40 0301 	orr.w	r3, r0, r1
 8003d7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc4 <UART_SetConfig+0x2cc>)
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d005      	beq.n	8003d98 <UART_SetConfig+0xa0>
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b8d      	ldr	r3, [pc, #564]	@ (8003fc8 <UART_SetConfig+0x2d0>)
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d104      	bne.n	8003da2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d98:	f7fe fb2c 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8003d9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003da0:	e003      	b.n	8003daa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003da2:	f7fe fb13 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
 8003da6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003db4:	f040 810c 	bne.w	8003fd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	1891      	adds	r1, r2, r2
 8003dd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dd2:	415b      	adcs	r3, r3
 8003dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dda:	4621      	mov	r1, r4
 8003ddc:	eb12 0801 	adds.w	r8, r2, r1
 8003de0:	4629      	mov	r1, r5
 8003de2:	eb43 0901 	adc.w	r9, r3, r1
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003df2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003df6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dfa:	4690      	mov	r8, r2
 8003dfc:	4699      	mov	r9, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	eb18 0303 	adds.w	r3, r8, r3
 8003e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e08:	462b      	mov	r3, r5
 8003e0a:	eb49 0303 	adc.w	r3, r9, r3
 8003e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e26:	460b      	mov	r3, r1
 8003e28:	18db      	adds	r3, r3, r3
 8003e2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	eb42 0303 	adc.w	r3, r2, r3
 8003e32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e3c:	f7fc fa38 	bl	80002b0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4b61      	ldr	r3, [pc, #388]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	011c      	lsls	r4, r3, #4
 8003e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e60:	4642      	mov	r2, r8
 8003e62:	464b      	mov	r3, r9
 8003e64:	1891      	adds	r1, r2, r2
 8003e66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e68:	415b      	adcs	r3, r3
 8003e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e70:	4641      	mov	r1, r8
 8003e72:	eb12 0a01 	adds.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb43 0b01 	adc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e90:	4692      	mov	sl, r2
 8003e92:	469b      	mov	fp, r3
 8003e94:	4643      	mov	r3, r8
 8003e96:	eb1a 0303 	adds.w	r3, sl, r3
 8003e9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e9e:	464b      	mov	r3, r9
 8003ea0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003eb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	18db      	adds	r3, r3, r3
 8003ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	eb42 0303 	adc.w	r3, r2, r3
 8003ec8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ece:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ed2:	f7fc f9ed 	bl	80002b0 <__aeabi_uldivmod>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4611      	mov	r1, r2
 8003edc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003ede:	fba3 2301 	umull	r2, r3, r3, r1
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	2264      	movs	r2, #100	@ 0x64
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	1acb      	subs	r3, r1, r3
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ef2:	4b36      	ldr	r3, [pc, #216]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003ef4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef8:	095b      	lsrs	r3, r3, #5
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f00:	441c      	add	r4, r3
 8003f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	1891      	adds	r1, r2, r2
 8003f1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f1c:	415b      	adcs	r3, r3
 8003f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f24:	4641      	mov	r1, r8
 8003f26:	1851      	adds	r1, r2, r1
 8003f28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	00cb      	lsls	r3, r1, #3
 8003f40:	4651      	mov	r1, sl
 8003f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f46:	4651      	mov	r1, sl
 8003f48:	00ca      	lsls	r2, r1, #3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4642      	mov	r2, r8
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f58:	464b      	mov	r3, r9
 8003f5a:	460a      	mov	r2, r1
 8003f5c:	eb42 0303 	adc.w	r3, r2, r3
 8003f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f78:	460b      	mov	r3, r1
 8003f7a:	18db      	adds	r3, r3, r3
 8003f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f7e:	4613      	mov	r3, r2
 8003f80:	eb42 0303 	adc.w	r3, r2, r3
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f8e:	f7fc f98f 	bl	80002b0 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	@ 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	3332      	adds	r3, #50	@ 0x32
 8003faa:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <UART_SetConfig+0x2d4>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 0207 	and.w	r2, r3, #7
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4422      	add	r2, r4
 8003fbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc0:	e106      	b.n	80041d0 <UART_SetConfig+0x4d8>
 8003fc2:	bf00      	nop
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	40011400 	.word	0x40011400
 8003fcc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fe2:	4642      	mov	r2, r8
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	1891      	adds	r1, r2, r2
 8003fe8:	6239      	str	r1, [r7, #32]
 8003fea:	415b      	adcs	r3, r3
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	1854      	adds	r4, r2, r1
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	eb43 0501 	adc.w	r5, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	00eb      	lsls	r3, r5, #3
 8004006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400a:	00e2      	lsls	r2, r4, #3
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	4643      	mov	r3, r8
 8004012:	18e3      	adds	r3, r4, r3
 8004014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004018:	464b      	mov	r3, r9
 800401a:	eb45 0303 	adc.w	r3, r5, r3
 800401e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800403e:	4629      	mov	r1, r5
 8004040:	008b      	lsls	r3, r1, #2
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004048:	4621      	mov	r1, r4
 800404a:	008a      	lsls	r2, r1, #2
 800404c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004050:	f7fc f92e 	bl	80002b0 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <UART_SetConfig+0x4e4>)
 800405a:	fba3 2302 	umull	r2, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	011c      	lsls	r4, r3, #4
 8004062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800406c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004070:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004074:	4642      	mov	r2, r8
 8004076:	464b      	mov	r3, r9
 8004078:	1891      	adds	r1, r2, r2
 800407a:	61b9      	str	r1, [r7, #24]
 800407c:	415b      	adcs	r3, r3
 800407e:	61fb      	str	r3, [r7, #28]
 8004080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004084:	4641      	mov	r1, r8
 8004086:	1851      	adds	r1, r2, r1
 8004088:	6139      	str	r1, [r7, #16]
 800408a:	4649      	mov	r1, r9
 800408c:	414b      	adcs	r3, r1
 800408e:	617b      	str	r3, [r7, #20]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800409c:	4659      	mov	r1, fp
 800409e:	00cb      	lsls	r3, r1, #3
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040a6:	4651      	mov	r1, sl
 80040a8:	00ca      	lsls	r2, r1, #3
 80040aa:	4610      	mov	r0, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	4642      	mov	r2, r8
 80040b2:	189b      	adds	r3, r3, r2
 80040b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040b8:	464b      	mov	r3, r9
 80040ba:	460a      	mov	r2, r1
 80040bc:	eb42 0303 	adc.w	r3, r2, r3
 80040c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040dc:	4649      	mov	r1, r9
 80040de:	008b      	lsls	r3, r1, #2
 80040e0:	4641      	mov	r1, r8
 80040e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040e6:	4641      	mov	r1, r8
 80040e8:	008a      	lsls	r2, r1, #2
 80040ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040ee:	f7fc f8df 	bl	80002b0 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	4b38      	ldr	r3, [pc, #224]	@ (80041dc <UART_SetConfig+0x4e4>)
 80040fa:	fba3 2301 	umull	r2, r3, r3, r1
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2264      	movs	r2, #100	@ 0x64
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	1acb      	subs	r3, r1, r3
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	3332      	adds	r3, #50	@ 0x32
 800410c:	4a33      	ldr	r2, [pc, #204]	@ (80041dc <UART_SetConfig+0x4e4>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004118:	441c      	add	r4, r3
 800411a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800411e:	2200      	movs	r2, #0
 8004120:	673b      	str	r3, [r7, #112]	@ 0x70
 8004122:	677a      	str	r2, [r7, #116]	@ 0x74
 8004124:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004128:	4642      	mov	r2, r8
 800412a:	464b      	mov	r3, r9
 800412c:	1891      	adds	r1, r2, r2
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	415b      	adcs	r3, r3
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004138:	4641      	mov	r1, r8
 800413a:	1851      	adds	r1, r2, r1
 800413c:	6039      	str	r1, [r7, #0]
 800413e:	4649      	mov	r1, r9
 8004140:	414b      	adcs	r3, r1
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004150:	4659      	mov	r1, fp
 8004152:	00cb      	lsls	r3, r1, #3
 8004154:	4651      	mov	r1, sl
 8004156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800415a:	4651      	mov	r1, sl
 800415c:	00ca      	lsls	r2, r1, #3
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	4603      	mov	r3, r0
 8004164:	4642      	mov	r2, r8
 8004166:	189b      	adds	r3, r3, r2
 8004168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800416a:	464b      	mov	r3, r9
 800416c:	460a      	mov	r2, r1
 800416e:	eb42 0303 	adc.w	r3, r2, r3
 8004172:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	663b      	str	r3, [r7, #96]	@ 0x60
 800417e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800418c:	4649      	mov	r1, r9
 800418e:	008b      	lsls	r3, r1, #2
 8004190:	4641      	mov	r1, r8
 8004192:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004196:	4641      	mov	r1, r8
 8004198:	008a      	lsls	r2, r1, #2
 800419a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800419e:	f7fc f887 	bl	80002b0 <__aeabi_uldivmod>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <UART_SetConfig+0x4e4>)
 80041a8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	2164      	movs	r1, #100	@ 0x64
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	3332      	adds	r3, #50	@ 0x32
 80041ba:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <UART_SetConfig+0x4e4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4422      	add	r2, r4
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041d6:	46bd      	mov	sp, r7
 80041d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041dc:	51eb851f 	.word	0x51eb851f

080041e0 <atoi>:
 80041e0:	220a      	movs	r2, #10
 80041e2:	2100      	movs	r1, #0
 80041e4:	f000 b87a 	b.w	80042dc <strtol>

080041e8 <_strtol_l.constprop.0>:
 80041e8:	2b24      	cmp	r3, #36	@ 0x24
 80041ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ee:	4686      	mov	lr, r0
 80041f0:	4690      	mov	r8, r2
 80041f2:	d801      	bhi.n	80041f8 <_strtol_l.constprop.0+0x10>
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d106      	bne.n	8004206 <_strtol_l.constprop.0+0x1e>
 80041f8:	f000 fb4e 	bl	8004898 <__errno>
 80041fc:	2316      	movs	r3, #22
 80041fe:	6003      	str	r3, [r0, #0]
 8004200:	2000      	movs	r0, #0
 8004202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004206:	4834      	ldr	r0, [pc, #208]	@ (80042d8 <_strtol_l.constprop.0+0xf0>)
 8004208:	460d      	mov	r5, r1
 800420a:	462a      	mov	r2, r5
 800420c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004210:	5d06      	ldrb	r6, [r0, r4]
 8004212:	f016 0608 	ands.w	r6, r6, #8
 8004216:	d1f8      	bne.n	800420a <_strtol_l.constprop.0+0x22>
 8004218:	2c2d      	cmp	r4, #45	@ 0x2d
 800421a:	d12d      	bne.n	8004278 <_strtol_l.constprop.0+0x90>
 800421c:	782c      	ldrb	r4, [r5, #0]
 800421e:	2601      	movs	r6, #1
 8004220:	1c95      	adds	r5, r2, #2
 8004222:	f033 0210 	bics.w	r2, r3, #16
 8004226:	d109      	bne.n	800423c <_strtol_l.constprop.0+0x54>
 8004228:	2c30      	cmp	r4, #48	@ 0x30
 800422a:	d12a      	bne.n	8004282 <_strtol_l.constprop.0+0x9a>
 800422c:	782a      	ldrb	r2, [r5, #0]
 800422e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004232:	2a58      	cmp	r2, #88	@ 0x58
 8004234:	d125      	bne.n	8004282 <_strtol_l.constprop.0+0x9a>
 8004236:	786c      	ldrb	r4, [r5, #1]
 8004238:	2310      	movs	r3, #16
 800423a:	3502      	adds	r5, #2
 800423c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004240:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004244:	2200      	movs	r2, #0
 8004246:	fbbc f9f3 	udiv	r9, ip, r3
 800424a:	4610      	mov	r0, r2
 800424c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004250:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004254:	2f09      	cmp	r7, #9
 8004256:	d81b      	bhi.n	8004290 <_strtol_l.constprop.0+0xa8>
 8004258:	463c      	mov	r4, r7
 800425a:	42a3      	cmp	r3, r4
 800425c:	dd27      	ble.n	80042ae <_strtol_l.constprop.0+0xc6>
 800425e:	1c57      	adds	r7, r2, #1
 8004260:	d007      	beq.n	8004272 <_strtol_l.constprop.0+0x8a>
 8004262:	4581      	cmp	r9, r0
 8004264:	d320      	bcc.n	80042a8 <_strtol_l.constprop.0+0xc0>
 8004266:	d101      	bne.n	800426c <_strtol_l.constprop.0+0x84>
 8004268:	45a2      	cmp	sl, r4
 800426a:	db1d      	blt.n	80042a8 <_strtol_l.constprop.0+0xc0>
 800426c:	fb00 4003 	mla	r0, r0, r3, r4
 8004270:	2201      	movs	r2, #1
 8004272:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004276:	e7eb      	b.n	8004250 <_strtol_l.constprop.0+0x68>
 8004278:	2c2b      	cmp	r4, #43	@ 0x2b
 800427a:	bf04      	itt	eq
 800427c:	782c      	ldrbeq	r4, [r5, #0]
 800427e:	1c95      	addeq	r5, r2, #2
 8004280:	e7cf      	b.n	8004222 <_strtol_l.constprop.0+0x3a>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1da      	bne.n	800423c <_strtol_l.constprop.0+0x54>
 8004286:	2c30      	cmp	r4, #48	@ 0x30
 8004288:	bf0c      	ite	eq
 800428a:	2308      	moveq	r3, #8
 800428c:	230a      	movne	r3, #10
 800428e:	e7d5      	b.n	800423c <_strtol_l.constprop.0+0x54>
 8004290:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004294:	2f19      	cmp	r7, #25
 8004296:	d801      	bhi.n	800429c <_strtol_l.constprop.0+0xb4>
 8004298:	3c37      	subs	r4, #55	@ 0x37
 800429a:	e7de      	b.n	800425a <_strtol_l.constprop.0+0x72>
 800429c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80042a0:	2f19      	cmp	r7, #25
 80042a2:	d804      	bhi.n	80042ae <_strtol_l.constprop.0+0xc6>
 80042a4:	3c57      	subs	r4, #87	@ 0x57
 80042a6:	e7d8      	b.n	800425a <_strtol_l.constprop.0+0x72>
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	e7e1      	b.n	8004272 <_strtol_l.constprop.0+0x8a>
 80042ae:	1c53      	adds	r3, r2, #1
 80042b0:	d108      	bne.n	80042c4 <_strtol_l.constprop.0+0xdc>
 80042b2:	2322      	movs	r3, #34	@ 0x22
 80042b4:	f8ce 3000 	str.w	r3, [lr]
 80042b8:	4660      	mov	r0, ip
 80042ba:	f1b8 0f00 	cmp.w	r8, #0
 80042be:	d0a0      	beq.n	8004202 <_strtol_l.constprop.0+0x1a>
 80042c0:	1e69      	subs	r1, r5, #1
 80042c2:	e006      	b.n	80042d2 <_strtol_l.constprop.0+0xea>
 80042c4:	b106      	cbz	r6, 80042c8 <_strtol_l.constprop.0+0xe0>
 80042c6:	4240      	negs	r0, r0
 80042c8:	f1b8 0f00 	cmp.w	r8, #0
 80042cc:	d099      	beq.n	8004202 <_strtol_l.constprop.0+0x1a>
 80042ce:	2a00      	cmp	r2, #0
 80042d0:	d1f6      	bne.n	80042c0 <_strtol_l.constprop.0+0xd8>
 80042d2:	f8c8 1000 	str.w	r1, [r8]
 80042d6:	e794      	b.n	8004202 <_strtol_l.constprop.0+0x1a>
 80042d8:	0800581d 	.word	0x0800581d

080042dc <strtol>:
 80042dc:	4613      	mov	r3, r2
 80042de:	460a      	mov	r2, r1
 80042e0:	4601      	mov	r1, r0
 80042e2:	4802      	ldr	r0, [pc, #8]	@ (80042ec <strtol+0x10>)
 80042e4:	6800      	ldr	r0, [r0, #0]
 80042e6:	f7ff bf7f 	b.w	80041e8 <_strtol_l.constprop.0>
 80042ea:	bf00      	nop
 80042ec:	20000018 	.word	0x20000018

080042f0 <std>:
 80042f0:	2300      	movs	r3, #0
 80042f2:	b510      	push	{r4, lr}
 80042f4:	4604      	mov	r4, r0
 80042f6:	e9c0 3300 	strd	r3, r3, [r0]
 80042fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fe:	6083      	str	r3, [r0, #8]
 8004300:	8181      	strh	r1, [r0, #12]
 8004302:	6643      	str	r3, [r0, #100]	@ 0x64
 8004304:	81c2      	strh	r2, [r0, #14]
 8004306:	6183      	str	r3, [r0, #24]
 8004308:	4619      	mov	r1, r3
 800430a:	2208      	movs	r2, #8
 800430c:	305c      	adds	r0, #92	@ 0x5c
 800430e:	f000 fa19 	bl	8004744 <memset>
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <std+0x58>)
 8004314:	6263      	str	r3, [r4, #36]	@ 0x24
 8004316:	4b0d      	ldr	r3, [pc, #52]	@ (800434c <std+0x5c>)
 8004318:	62a3      	str	r3, [r4, #40]	@ 0x28
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <std+0x60>)
 800431c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <std+0x64>)
 8004320:	6323      	str	r3, [r4, #48]	@ 0x30
 8004322:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <std+0x68>)
 8004324:	6224      	str	r4, [r4, #32]
 8004326:	429c      	cmp	r4, r3
 8004328:	d006      	beq.n	8004338 <std+0x48>
 800432a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800432e:	4294      	cmp	r4, r2
 8004330:	d002      	beq.n	8004338 <std+0x48>
 8004332:	33d0      	adds	r3, #208	@ 0xd0
 8004334:	429c      	cmp	r4, r3
 8004336:	d105      	bne.n	8004344 <std+0x54>
 8004338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f000 bad4 	b.w	80048ec <__retarget_lock_init_recursive>
 8004344:	bd10      	pop	{r4, pc}
 8004346:	bf00      	nop
 8004348:	08004595 	.word	0x08004595
 800434c:	080045b7 	.word	0x080045b7
 8004350:	080045ef 	.word	0x080045ef
 8004354:	08004613 	.word	0x08004613
 8004358:	2000022c 	.word	0x2000022c

0800435c <stdio_exit_handler>:
 800435c:	4a02      	ldr	r2, [pc, #8]	@ (8004368 <stdio_exit_handler+0xc>)
 800435e:	4903      	ldr	r1, [pc, #12]	@ (800436c <stdio_exit_handler+0x10>)
 8004360:	4803      	ldr	r0, [pc, #12]	@ (8004370 <stdio_exit_handler+0x14>)
 8004362:	f000 b869 	b.w	8004438 <_fwalk_sglue>
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c
 800436c:	08005499 	.word	0x08005499
 8004370:	2000001c 	.word	0x2000001c

08004374 <cleanup_stdio>:
 8004374:	6841      	ldr	r1, [r0, #4]
 8004376:	4b0c      	ldr	r3, [pc, #48]	@ (80043a8 <cleanup_stdio+0x34>)
 8004378:	4299      	cmp	r1, r3
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	d001      	beq.n	8004384 <cleanup_stdio+0x10>
 8004380:	f001 f88a 	bl	8005498 <_fflush_r>
 8004384:	68a1      	ldr	r1, [r4, #8]
 8004386:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <cleanup_stdio+0x38>)
 8004388:	4299      	cmp	r1, r3
 800438a:	d002      	beq.n	8004392 <cleanup_stdio+0x1e>
 800438c:	4620      	mov	r0, r4
 800438e:	f001 f883 	bl	8005498 <_fflush_r>
 8004392:	68e1      	ldr	r1, [r4, #12]
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <cleanup_stdio+0x3c>)
 8004396:	4299      	cmp	r1, r3
 8004398:	d004      	beq.n	80043a4 <cleanup_stdio+0x30>
 800439a:	4620      	mov	r0, r4
 800439c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043a0:	f001 b87a 	b.w	8005498 <_fflush_r>
 80043a4:	bd10      	pop	{r4, pc}
 80043a6:	bf00      	nop
 80043a8:	2000022c 	.word	0x2000022c
 80043ac:	20000294 	.word	0x20000294
 80043b0:	200002fc 	.word	0x200002fc

080043b4 <global_stdio_init.part.0>:
 80043b4:	b510      	push	{r4, lr}
 80043b6:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <global_stdio_init.part.0+0x30>)
 80043b8:	4c0b      	ldr	r4, [pc, #44]	@ (80043e8 <global_stdio_init.part.0+0x34>)
 80043ba:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <global_stdio_init.part.0+0x38>)
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	4620      	mov	r0, r4
 80043c0:	2200      	movs	r2, #0
 80043c2:	2104      	movs	r1, #4
 80043c4:	f7ff ff94 	bl	80042f0 <std>
 80043c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043cc:	2201      	movs	r2, #1
 80043ce:	2109      	movs	r1, #9
 80043d0:	f7ff ff8e 	bl	80042f0 <std>
 80043d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043d8:	2202      	movs	r2, #2
 80043da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043de:	2112      	movs	r1, #18
 80043e0:	f7ff bf86 	b.w	80042f0 <std>
 80043e4:	20000364 	.word	0x20000364
 80043e8:	2000022c 	.word	0x2000022c
 80043ec:	0800435d 	.word	0x0800435d

080043f0 <__sfp_lock_acquire>:
 80043f0:	4801      	ldr	r0, [pc, #4]	@ (80043f8 <__sfp_lock_acquire+0x8>)
 80043f2:	f000 ba7c 	b.w	80048ee <__retarget_lock_acquire_recursive>
 80043f6:	bf00      	nop
 80043f8:	2000036d 	.word	0x2000036d

080043fc <__sfp_lock_release>:
 80043fc:	4801      	ldr	r0, [pc, #4]	@ (8004404 <__sfp_lock_release+0x8>)
 80043fe:	f000 ba77 	b.w	80048f0 <__retarget_lock_release_recursive>
 8004402:	bf00      	nop
 8004404:	2000036d 	.word	0x2000036d

08004408 <__sinit>:
 8004408:	b510      	push	{r4, lr}
 800440a:	4604      	mov	r4, r0
 800440c:	f7ff fff0 	bl	80043f0 <__sfp_lock_acquire>
 8004410:	6a23      	ldr	r3, [r4, #32]
 8004412:	b11b      	cbz	r3, 800441c <__sinit+0x14>
 8004414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004418:	f7ff bff0 	b.w	80043fc <__sfp_lock_release>
 800441c:	4b04      	ldr	r3, [pc, #16]	@ (8004430 <__sinit+0x28>)
 800441e:	6223      	str	r3, [r4, #32]
 8004420:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <__sinit+0x2c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f5      	bne.n	8004414 <__sinit+0xc>
 8004428:	f7ff ffc4 	bl	80043b4 <global_stdio_init.part.0>
 800442c:	e7f2      	b.n	8004414 <__sinit+0xc>
 800442e:	bf00      	nop
 8004430:	08004375 	.word	0x08004375
 8004434:	20000364 	.word	0x20000364

08004438 <_fwalk_sglue>:
 8004438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800443c:	4607      	mov	r7, r0
 800443e:	4688      	mov	r8, r1
 8004440:	4614      	mov	r4, r2
 8004442:	2600      	movs	r6, #0
 8004444:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004448:	f1b9 0901 	subs.w	r9, r9, #1
 800444c:	d505      	bpl.n	800445a <_fwalk_sglue+0x22>
 800444e:	6824      	ldr	r4, [r4, #0]
 8004450:	2c00      	cmp	r4, #0
 8004452:	d1f7      	bne.n	8004444 <_fwalk_sglue+0xc>
 8004454:	4630      	mov	r0, r6
 8004456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d907      	bls.n	8004470 <_fwalk_sglue+0x38>
 8004460:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004464:	3301      	adds	r3, #1
 8004466:	d003      	beq.n	8004470 <_fwalk_sglue+0x38>
 8004468:	4629      	mov	r1, r5
 800446a:	4638      	mov	r0, r7
 800446c:	47c0      	blx	r8
 800446e:	4306      	orrs	r6, r0
 8004470:	3568      	adds	r5, #104	@ 0x68
 8004472:	e7e9      	b.n	8004448 <_fwalk_sglue+0x10>

08004474 <iprintf>:
 8004474:	b40f      	push	{r0, r1, r2, r3}
 8004476:	b507      	push	{r0, r1, r2, lr}
 8004478:	4906      	ldr	r1, [pc, #24]	@ (8004494 <iprintf+0x20>)
 800447a:	ab04      	add	r3, sp, #16
 800447c:	6808      	ldr	r0, [r1, #0]
 800447e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004482:	6881      	ldr	r1, [r0, #8]
 8004484:	9301      	str	r3, [sp, #4]
 8004486:	f000 fcdd 	bl	8004e44 <_vfiprintf_r>
 800448a:	b003      	add	sp, #12
 800448c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004490:	b004      	add	sp, #16
 8004492:	4770      	bx	lr
 8004494:	20000018 	.word	0x20000018

08004498 <_puts_r>:
 8004498:	6a03      	ldr	r3, [r0, #32]
 800449a:	b570      	push	{r4, r5, r6, lr}
 800449c:	6884      	ldr	r4, [r0, #8]
 800449e:	4605      	mov	r5, r0
 80044a0:	460e      	mov	r6, r1
 80044a2:	b90b      	cbnz	r3, 80044a8 <_puts_r+0x10>
 80044a4:	f7ff ffb0 	bl	8004408 <__sinit>
 80044a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044aa:	07db      	lsls	r3, r3, #31
 80044ac:	d405      	bmi.n	80044ba <_puts_r+0x22>
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	0598      	lsls	r0, r3, #22
 80044b2:	d402      	bmi.n	80044ba <_puts_r+0x22>
 80044b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044b6:	f000 fa1a 	bl	80048ee <__retarget_lock_acquire_recursive>
 80044ba:	89a3      	ldrh	r3, [r4, #12]
 80044bc:	0719      	lsls	r1, r3, #28
 80044be:	d502      	bpl.n	80044c6 <_puts_r+0x2e>
 80044c0:	6923      	ldr	r3, [r4, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d135      	bne.n	8004532 <_puts_r+0x9a>
 80044c6:	4621      	mov	r1, r4
 80044c8:	4628      	mov	r0, r5
 80044ca:	f000 f8e5 	bl	8004698 <__swsetup_r>
 80044ce:	b380      	cbz	r0, 8004532 <_puts_r+0x9a>
 80044d0:	f04f 35ff 	mov.w	r5, #4294967295
 80044d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044d6:	07da      	lsls	r2, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_puts_r+0x4e>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	059b      	lsls	r3, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_puts_r+0x4e>
 80044e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044e2:	f000 fa05 	bl	80048f0 <__retarget_lock_release_recursive>
 80044e6:	4628      	mov	r0, r5
 80044e8:	bd70      	pop	{r4, r5, r6, pc}
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da04      	bge.n	80044f8 <_puts_r+0x60>
 80044ee:	69a2      	ldr	r2, [r4, #24]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	dc17      	bgt.n	8004524 <_puts_r+0x8c>
 80044f4:	290a      	cmp	r1, #10
 80044f6:	d015      	beq.n	8004524 <_puts_r+0x8c>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	6022      	str	r2, [r4, #0]
 80044fe:	7019      	strb	r1, [r3, #0]
 8004500:	68a3      	ldr	r3, [r4, #8]
 8004502:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004506:	3b01      	subs	r3, #1
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	2900      	cmp	r1, #0
 800450c:	d1ed      	bne.n	80044ea <_puts_r+0x52>
 800450e:	2b00      	cmp	r3, #0
 8004510:	da11      	bge.n	8004536 <_puts_r+0x9e>
 8004512:	4622      	mov	r2, r4
 8004514:	210a      	movs	r1, #10
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f87f 	bl	800461a <__swbuf_r>
 800451c:	3001      	adds	r0, #1
 800451e:	d0d7      	beq.n	80044d0 <_puts_r+0x38>
 8004520:	250a      	movs	r5, #10
 8004522:	e7d7      	b.n	80044d4 <_puts_r+0x3c>
 8004524:	4622      	mov	r2, r4
 8004526:	4628      	mov	r0, r5
 8004528:	f000 f877 	bl	800461a <__swbuf_r>
 800452c:	3001      	adds	r0, #1
 800452e:	d1e7      	bne.n	8004500 <_puts_r+0x68>
 8004530:	e7ce      	b.n	80044d0 <_puts_r+0x38>
 8004532:	3e01      	subs	r6, #1
 8004534:	e7e4      	b.n	8004500 <_puts_r+0x68>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	6022      	str	r2, [r4, #0]
 800453c:	220a      	movs	r2, #10
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e7ee      	b.n	8004520 <_puts_r+0x88>
	...

08004544 <puts>:
 8004544:	4b02      	ldr	r3, [pc, #8]	@ (8004550 <puts+0xc>)
 8004546:	4601      	mov	r1, r0
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	f7ff bfa5 	b.w	8004498 <_puts_r>
 800454e:	bf00      	nop
 8004550:	20000018 	.word	0x20000018

08004554 <siprintf>:
 8004554:	b40e      	push	{r1, r2, r3}
 8004556:	b500      	push	{lr}
 8004558:	b09c      	sub	sp, #112	@ 0x70
 800455a:	ab1d      	add	r3, sp, #116	@ 0x74
 800455c:	9002      	str	r0, [sp, #8]
 800455e:	9006      	str	r0, [sp, #24]
 8004560:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004564:	4809      	ldr	r0, [pc, #36]	@ (800458c <siprintf+0x38>)
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	9104      	str	r1, [sp, #16]
 800456a:	4909      	ldr	r1, [pc, #36]	@ (8004590 <siprintf+0x3c>)
 800456c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004570:	9105      	str	r1, [sp, #20]
 8004572:	6800      	ldr	r0, [r0, #0]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	a902      	add	r1, sp, #8
 8004578:	f000 fb3e 	bl	8004bf8 <_svfiprintf_r>
 800457c:	9b02      	ldr	r3, [sp, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	b01c      	add	sp, #112	@ 0x70
 8004584:	f85d eb04 	ldr.w	lr, [sp], #4
 8004588:	b003      	add	sp, #12
 800458a:	4770      	bx	lr
 800458c:	20000018 	.word	0x20000018
 8004590:	ffff0208 	.word	0xffff0208

08004594 <__sread>:
 8004594:	b510      	push	{r4, lr}
 8004596:	460c      	mov	r4, r1
 8004598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800459c:	f000 f958 	bl	8004850 <_read_r>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	bfab      	itete	ge
 80045a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80045a6:	89a3      	ldrhlt	r3, [r4, #12]
 80045a8:	181b      	addge	r3, r3, r0
 80045aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80045ae:	bfac      	ite	ge
 80045b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80045b2:	81a3      	strhlt	r3, [r4, #12]
 80045b4:	bd10      	pop	{r4, pc}

080045b6 <__swrite>:
 80045b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ba:	461f      	mov	r7, r3
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	05db      	lsls	r3, r3, #23
 80045c0:	4605      	mov	r5, r0
 80045c2:	460c      	mov	r4, r1
 80045c4:	4616      	mov	r6, r2
 80045c6:	d505      	bpl.n	80045d4 <__swrite+0x1e>
 80045c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045cc:	2302      	movs	r3, #2
 80045ce:	2200      	movs	r2, #0
 80045d0:	f000 f92c 	bl	800482c <_lseek_r>
 80045d4:	89a3      	ldrh	r3, [r4, #12]
 80045d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045de:	81a3      	strh	r3, [r4, #12]
 80045e0:	4632      	mov	r2, r6
 80045e2:	463b      	mov	r3, r7
 80045e4:	4628      	mov	r0, r5
 80045e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ea:	f000 b943 	b.w	8004874 <_write_r>

080045ee <__sseek>:
 80045ee:	b510      	push	{r4, lr}
 80045f0:	460c      	mov	r4, r1
 80045f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f6:	f000 f919 	bl	800482c <_lseek_r>
 80045fa:	1c43      	adds	r3, r0, #1
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	bf15      	itete	ne
 8004600:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800460a:	81a3      	strheq	r3, [r4, #12]
 800460c:	bf18      	it	ne
 800460e:	81a3      	strhne	r3, [r4, #12]
 8004610:	bd10      	pop	{r4, pc}

08004612 <__sclose>:
 8004612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004616:	f000 b8f9 	b.w	800480c <_close_r>

0800461a <__swbuf_r>:
 800461a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461c:	460e      	mov	r6, r1
 800461e:	4614      	mov	r4, r2
 8004620:	4605      	mov	r5, r0
 8004622:	b118      	cbz	r0, 800462c <__swbuf_r+0x12>
 8004624:	6a03      	ldr	r3, [r0, #32]
 8004626:	b90b      	cbnz	r3, 800462c <__swbuf_r+0x12>
 8004628:	f7ff feee 	bl	8004408 <__sinit>
 800462c:	69a3      	ldr	r3, [r4, #24]
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	071a      	lsls	r2, r3, #28
 8004634:	d501      	bpl.n	800463a <__swbuf_r+0x20>
 8004636:	6923      	ldr	r3, [r4, #16]
 8004638:	b943      	cbnz	r3, 800464c <__swbuf_r+0x32>
 800463a:	4621      	mov	r1, r4
 800463c:	4628      	mov	r0, r5
 800463e:	f000 f82b 	bl	8004698 <__swsetup_r>
 8004642:	b118      	cbz	r0, 800464c <__swbuf_r+0x32>
 8004644:	f04f 37ff 	mov.w	r7, #4294967295
 8004648:	4638      	mov	r0, r7
 800464a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	6922      	ldr	r2, [r4, #16]
 8004650:	1a98      	subs	r0, r3, r2
 8004652:	6963      	ldr	r3, [r4, #20]
 8004654:	b2f6      	uxtb	r6, r6
 8004656:	4283      	cmp	r3, r0
 8004658:	4637      	mov	r7, r6
 800465a:	dc05      	bgt.n	8004668 <__swbuf_r+0x4e>
 800465c:	4621      	mov	r1, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f000 ff1a 	bl	8005498 <_fflush_r>
 8004664:	2800      	cmp	r0, #0
 8004666:	d1ed      	bne.n	8004644 <__swbuf_r+0x2a>
 8004668:	68a3      	ldr	r3, [r4, #8]
 800466a:	3b01      	subs	r3, #1
 800466c:	60a3      	str	r3, [r4, #8]
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	6022      	str	r2, [r4, #0]
 8004674:	701e      	strb	r6, [r3, #0]
 8004676:	6962      	ldr	r2, [r4, #20]
 8004678:	1c43      	adds	r3, r0, #1
 800467a:	429a      	cmp	r2, r3
 800467c:	d004      	beq.n	8004688 <__swbuf_r+0x6e>
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	07db      	lsls	r3, r3, #31
 8004682:	d5e1      	bpl.n	8004648 <__swbuf_r+0x2e>
 8004684:	2e0a      	cmp	r6, #10
 8004686:	d1df      	bne.n	8004648 <__swbuf_r+0x2e>
 8004688:	4621      	mov	r1, r4
 800468a:	4628      	mov	r0, r5
 800468c:	f000 ff04 	bl	8005498 <_fflush_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	d0d9      	beq.n	8004648 <__swbuf_r+0x2e>
 8004694:	e7d6      	b.n	8004644 <__swbuf_r+0x2a>
	...

08004698 <__swsetup_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4b29      	ldr	r3, [pc, #164]	@ (8004740 <__swsetup_r+0xa8>)
 800469c:	4605      	mov	r5, r0
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	460c      	mov	r4, r1
 80046a2:	b118      	cbz	r0, 80046ac <__swsetup_r+0x14>
 80046a4:	6a03      	ldr	r3, [r0, #32]
 80046a6:	b90b      	cbnz	r3, 80046ac <__swsetup_r+0x14>
 80046a8:	f7ff feae 	bl	8004408 <__sinit>
 80046ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b0:	0719      	lsls	r1, r3, #28
 80046b2:	d422      	bmi.n	80046fa <__swsetup_r+0x62>
 80046b4:	06da      	lsls	r2, r3, #27
 80046b6:	d407      	bmi.n	80046c8 <__swsetup_r+0x30>
 80046b8:	2209      	movs	r2, #9
 80046ba:	602a      	str	r2, [r5, #0]
 80046bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c0:	81a3      	strh	r3, [r4, #12]
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	e033      	b.n	8004730 <__swsetup_r+0x98>
 80046c8:	0758      	lsls	r0, r3, #29
 80046ca:	d512      	bpl.n	80046f2 <__swsetup_r+0x5a>
 80046cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046ce:	b141      	cbz	r1, 80046e2 <__swsetup_r+0x4a>
 80046d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046d4:	4299      	cmp	r1, r3
 80046d6:	d002      	beq.n	80046de <__swsetup_r+0x46>
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 f931 	bl	8004940 <_free_r>
 80046de:	2300      	movs	r3, #0
 80046e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80046e2:	89a3      	ldrh	r3, [r4, #12]
 80046e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80046e8:	81a3      	strh	r3, [r4, #12]
 80046ea:	2300      	movs	r3, #0
 80046ec:	6063      	str	r3, [r4, #4]
 80046ee:	6923      	ldr	r3, [r4, #16]
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	f043 0308 	orr.w	r3, r3, #8
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	6923      	ldr	r3, [r4, #16]
 80046fc:	b94b      	cbnz	r3, 8004712 <__swsetup_r+0x7a>
 80046fe:	89a3      	ldrh	r3, [r4, #12]
 8004700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004708:	d003      	beq.n	8004712 <__swsetup_r+0x7a>
 800470a:	4621      	mov	r1, r4
 800470c:	4628      	mov	r0, r5
 800470e:	f000 ff23 	bl	8005558 <__smakebuf_r>
 8004712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004716:	f013 0201 	ands.w	r2, r3, #1
 800471a:	d00a      	beq.n	8004732 <__swsetup_r+0x9a>
 800471c:	2200      	movs	r2, #0
 800471e:	60a2      	str	r2, [r4, #8]
 8004720:	6962      	ldr	r2, [r4, #20]
 8004722:	4252      	negs	r2, r2
 8004724:	61a2      	str	r2, [r4, #24]
 8004726:	6922      	ldr	r2, [r4, #16]
 8004728:	b942      	cbnz	r2, 800473c <__swsetup_r+0xa4>
 800472a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800472e:	d1c5      	bne.n	80046bc <__swsetup_r+0x24>
 8004730:	bd38      	pop	{r3, r4, r5, pc}
 8004732:	0799      	lsls	r1, r3, #30
 8004734:	bf58      	it	pl
 8004736:	6962      	ldrpl	r2, [r4, #20]
 8004738:	60a2      	str	r2, [r4, #8]
 800473a:	e7f4      	b.n	8004726 <__swsetup_r+0x8e>
 800473c:	2000      	movs	r0, #0
 800473e:	e7f7      	b.n	8004730 <__swsetup_r+0x98>
 8004740:	20000018 	.word	0x20000018

08004744 <memset>:
 8004744:	4402      	add	r2, r0
 8004746:	4603      	mov	r3, r0
 8004748:	4293      	cmp	r3, r2
 800474a:	d100      	bne.n	800474e <memset+0xa>
 800474c:	4770      	bx	lr
 800474e:	f803 1b01 	strb.w	r1, [r3], #1
 8004752:	e7f9      	b.n	8004748 <memset+0x4>

08004754 <strtok>:
 8004754:	4b16      	ldr	r3, [pc, #88]	@ (80047b0 <strtok+0x5c>)
 8004756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475a:	681f      	ldr	r7, [r3, #0]
 800475c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800475e:	4605      	mov	r5, r0
 8004760:	460e      	mov	r6, r1
 8004762:	b9ec      	cbnz	r4, 80047a0 <strtok+0x4c>
 8004764:	2050      	movs	r0, #80	@ 0x50
 8004766:	f000 f935 	bl	80049d4 <malloc>
 800476a:	4602      	mov	r2, r0
 800476c:	6478      	str	r0, [r7, #68]	@ 0x44
 800476e:	b920      	cbnz	r0, 800477a <strtok+0x26>
 8004770:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <strtok+0x60>)
 8004772:	4811      	ldr	r0, [pc, #68]	@ (80047b8 <strtok+0x64>)
 8004774:	215b      	movs	r1, #91	@ 0x5b
 8004776:	f000 f8c5 	bl	8004904 <__assert_func>
 800477a:	e9c0 4400 	strd	r4, r4, [r0]
 800477e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004782:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004786:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800478a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800478e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004792:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004796:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800479a:	6184      	str	r4, [r0, #24]
 800479c:	7704      	strb	r4, [r0, #28]
 800479e:	6244      	str	r4, [r0, #36]	@ 0x24
 80047a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a2:	4631      	mov	r1, r6
 80047a4:	4628      	mov	r0, r5
 80047a6:	2301      	movs	r3, #1
 80047a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ac:	f000 b806 	b.w	80047bc <__strtok_r>
 80047b0:	20000018 	.word	0x20000018
 80047b4:	0800591d 	.word	0x0800591d
 80047b8:	08005934 	.word	0x08005934

080047bc <__strtok_r>:
 80047bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047be:	4604      	mov	r4, r0
 80047c0:	b908      	cbnz	r0, 80047c6 <__strtok_r+0xa>
 80047c2:	6814      	ldr	r4, [r2, #0]
 80047c4:	b144      	cbz	r4, 80047d8 <__strtok_r+0x1c>
 80047c6:	4620      	mov	r0, r4
 80047c8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80047cc:	460f      	mov	r7, r1
 80047ce:	f817 6b01 	ldrb.w	r6, [r7], #1
 80047d2:	b91e      	cbnz	r6, 80047dc <__strtok_r+0x20>
 80047d4:	b965      	cbnz	r5, 80047f0 <__strtok_r+0x34>
 80047d6:	6015      	str	r5, [r2, #0]
 80047d8:	2000      	movs	r0, #0
 80047da:	e005      	b.n	80047e8 <__strtok_r+0x2c>
 80047dc:	42b5      	cmp	r5, r6
 80047de:	d1f6      	bne.n	80047ce <__strtok_r+0x12>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f0      	bne.n	80047c6 <__strtok_r+0xa>
 80047e4:	6014      	str	r4, [r2, #0]
 80047e6:	7003      	strb	r3, [r0, #0]
 80047e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047ea:	461c      	mov	r4, r3
 80047ec:	e00c      	b.n	8004808 <__strtok_r+0x4c>
 80047ee:	b915      	cbnz	r5, 80047f6 <__strtok_r+0x3a>
 80047f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047f4:	460e      	mov	r6, r1
 80047f6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80047fa:	42ab      	cmp	r3, r5
 80047fc:	d1f7      	bne.n	80047ee <__strtok_r+0x32>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f3      	beq.n	80047ea <__strtok_r+0x2e>
 8004802:	2300      	movs	r3, #0
 8004804:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004808:	6014      	str	r4, [r2, #0]
 800480a:	e7ed      	b.n	80047e8 <__strtok_r+0x2c>

0800480c <_close_r>:
 800480c:	b538      	push	{r3, r4, r5, lr}
 800480e:	4d06      	ldr	r5, [pc, #24]	@ (8004828 <_close_r+0x1c>)
 8004810:	2300      	movs	r3, #0
 8004812:	4604      	mov	r4, r0
 8004814:	4608      	mov	r0, r1
 8004816:	602b      	str	r3, [r5, #0]
 8004818:	f7fc fd0e 	bl	8001238 <_close>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_close_r+0x1a>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_close_r+0x1a>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	20000368 	.word	0x20000368

0800482c <_lseek_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	@ (800484c <_lseek_r+0x20>)
 8004830:	4604      	mov	r4, r0
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	2200      	movs	r2, #0
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc fd23 	bl	8001286 <_lseek>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_lseek_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_lseek_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000368 	.word	0x20000368

08004850 <_read_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	@ (8004870 <_read_r+0x20>)
 8004854:	4604      	mov	r4, r0
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc fcb1 	bl	80011c6 <_read>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_read_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_read_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000368 	.word	0x20000368

08004874 <_write_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d07      	ldr	r5, [pc, #28]	@ (8004894 <_write_r+0x20>)
 8004878:	4604      	mov	r4, r0
 800487a:	4608      	mov	r0, r1
 800487c:	4611      	mov	r1, r2
 800487e:	2200      	movs	r2, #0
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7fc fcbc 	bl	8001200 <_write>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_write_r+0x1e>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_write_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20000368 	.word	0x20000368

08004898 <__errno>:
 8004898:	4b01      	ldr	r3, [pc, #4]	@ (80048a0 <__errno+0x8>)
 800489a:	6818      	ldr	r0, [r3, #0]
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	20000018 	.word	0x20000018

080048a4 <__libc_init_array>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4d0d      	ldr	r5, [pc, #52]	@ (80048dc <__libc_init_array+0x38>)
 80048a8:	4c0d      	ldr	r4, [pc, #52]	@ (80048e0 <__libc_init_array+0x3c>)
 80048aa:	1b64      	subs	r4, r4, r5
 80048ac:	10a4      	asrs	r4, r4, #2
 80048ae:	2600      	movs	r6, #0
 80048b0:	42a6      	cmp	r6, r4
 80048b2:	d109      	bne.n	80048c8 <__libc_init_array+0x24>
 80048b4:	4d0b      	ldr	r5, [pc, #44]	@ (80048e4 <__libc_init_array+0x40>)
 80048b6:	4c0c      	ldr	r4, [pc, #48]	@ (80048e8 <__libc_init_array+0x44>)
 80048b8:	f000 ff66 	bl	8005788 <_init>
 80048bc:	1b64      	subs	r4, r4, r5
 80048be:	10a4      	asrs	r4, r4, #2
 80048c0:	2600      	movs	r6, #0
 80048c2:	42a6      	cmp	r6, r4
 80048c4:	d105      	bne.n	80048d2 <__libc_init_array+0x2e>
 80048c6:	bd70      	pop	{r4, r5, r6, pc}
 80048c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048cc:	4798      	blx	r3
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7ee      	b.n	80048b0 <__libc_init_array+0xc>
 80048d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d6:	4798      	blx	r3
 80048d8:	3601      	adds	r6, #1
 80048da:	e7f2      	b.n	80048c2 <__libc_init_array+0x1e>
 80048dc:	08005a08 	.word	0x08005a08
 80048e0:	08005a08 	.word	0x08005a08
 80048e4:	08005a08 	.word	0x08005a08
 80048e8:	08005a0c 	.word	0x08005a0c

080048ec <__retarget_lock_init_recursive>:
 80048ec:	4770      	bx	lr

080048ee <__retarget_lock_acquire_recursive>:
 80048ee:	4770      	bx	lr

080048f0 <__retarget_lock_release_recursive>:
 80048f0:	4770      	bx	lr

080048f2 <strcpy>:
 80048f2:	4603      	mov	r3, r0
 80048f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048f8:	f803 2b01 	strb.w	r2, [r3], #1
 80048fc:	2a00      	cmp	r2, #0
 80048fe:	d1f9      	bne.n	80048f4 <strcpy+0x2>
 8004900:	4770      	bx	lr
	...

08004904 <__assert_func>:
 8004904:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004906:	4614      	mov	r4, r2
 8004908:	461a      	mov	r2, r3
 800490a:	4b09      	ldr	r3, [pc, #36]	@ (8004930 <__assert_func+0x2c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4605      	mov	r5, r0
 8004910:	68d8      	ldr	r0, [r3, #12]
 8004912:	b954      	cbnz	r4, 800492a <__assert_func+0x26>
 8004914:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <__assert_func+0x30>)
 8004916:	461c      	mov	r4, r3
 8004918:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800491c:	9100      	str	r1, [sp, #0]
 800491e:	462b      	mov	r3, r5
 8004920:	4905      	ldr	r1, [pc, #20]	@ (8004938 <__assert_func+0x34>)
 8004922:	f000 fde1 	bl	80054e8 <fiprintf>
 8004926:	f000 fead 	bl	8005684 <abort>
 800492a:	4b04      	ldr	r3, [pc, #16]	@ (800493c <__assert_func+0x38>)
 800492c:	e7f4      	b.n	8004918 <__assert_func+0x14>
 800492e:	bf00      	nop
 8004930:	20000018 	.word	0x20000018
 8004934:	080059c9 	.word	0x080059c9
 8004938:	0800599b 	.word	0x0800599b
 800493c:	0800598e 	.word	0x0800598e

08004940 <_free_r>:
 8004940:	b538      	push	{r3, r4, r5, lr}
 8004942:	4605      	mov	r5, r0
 8004944:	2900      	cmp	r1, #0
 8004946:	d041      	beq.n	80049cc <_free_r+0x8c>
 8004948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800494c:	1f0c      	subs	r4, r1, #4
 800494e:	2b00      	cmp	r3, #0
 8004950:	bfb8      	it	lt
 8004952:	18e4      	addlt	r4, r4, r3
 8004954:	f000 f8e8 	bl	8004b28 <__malloc_lock>
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <_free_r+0x90>)
 800495a:	6813      	ldr	r3, [r2, #0]
 800495c:	b933      	cbnz	r3, 800496c <_free_r+0x2c>
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	4628      	mov	r0, r5
 8004964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004968:	f000 b8e4 	b.w	8004b34 <__malloc_unlock>
 800496c:	42a3      	cmp	r3, r4
 800496e:	d908      	bls.n	8004982 <_free_r+0x42>
 8004970:	6820      	ldr	r0, [r4, #0]
 8004972:	1821      	adds	r1, r4, r0
 8004974:	428b      	cmp	r3, r1
 8004976:	bf01      	itttt	eq
 8004978:	6819      	ldreq	r1, [r3, #0]
 800497a:	685b      	ldreq	r3, [r3, #4]
 800497c:	1809      	addeq	r1, r1, r0
 800497e:	6021      	streq	r1, [r4, #0]
 8004980:	e7ed      	b.n	800495e <_free_r+0x1e>
 8004982:	461a      	mov	r2, r3
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	b10b      	cbz	r3, 800498c <_free_r+0x4c>
 8004988:	42a3      	cmp	r3, r4
 800498a:	d9fa      	bls.n	8004982 <_free_r+0x42>
 800498c:	6811      	ldr	r1, [r2, #0]
 800498e:	1850      	adds	r0, r2, r1
 8004990:	42a0      	cmp	r0, r4
 8004992:	d10b      	bne.n	80049ac <_free_r+0x6c>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	4401      	add	r1, r0
 8004998:	1850      	adds	r0, r2, r1
 800499a:	4283      	cmp	r3, r0
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	d1e0      	bne.n	8004962 <_free_r+0x22>
 80049a0:	6818      	ldr	r0, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	6053      	str	r3, [r2, #4]
 80049a6:	4408      	add	r0, r1
 80049a8:	6010      	str	r0, [r2, #0]
 80049aa:	e7da      	b.n	8004962 <_free_r+0x22>
 80049ac:	d902      	bls.n	80049b4 <_free_r+0x74>
 80049ae:	230c      	movs	r3, #12
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	e7d6      	b.n	8004962 <_free_r+0x22>
 80049b4:	6820      	ldr	r0, [r4, #0]
 80049b6:	1821      	adds	r1, r4, r0
 80049b8:	428b      	cmp	r3, r1
 80049ba:	bf04      	itt	eq
 80049bc:	6819      	ldreq	r1, [r3, #0]
 80049be:	685b      	ldreq	r3, [r3, #4]
 80049c0:	6063      	str	r3, [r4, #4]
 80049c2:	bf04      	itt	eq
 80049c4:	1809      	addeq	r1, r1, r0
 80049c6:	6021      	streq	r1, [r4, #0]
 80049c8:	6054      	str	r4, [r2, #4]
 80049ca:	e7ca      	b.n	8004962 <_free_r+0x22>
 80049cc:	bd38      	pop	{r3, r4, r5, pc}
 80049ce:	bf00      	nop
 80049d0:	20000374 	.word	0x20000374

080049d4 <malloc>:
 80049d4:	4b02      	ldr	r3, [pc, #8]	@ (80049e0 <malloc+0xc>)
 80049d6:	4601      	mov	r1, r0
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	f000 b825 	b.w	8004a28 <_malloc_r>
 80049de:	bf00      	nop
 80049e0:	20000018 	.word	0x20000018

080049e4 <sbrk_aligned>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4e0f      	ldr	r6, [pc, #60]	@ (8004a24 <sbrk_aligned+0x40>)
 80049e8:	460c      	mov	r4, r1
 80049ea:	6831      	ldr	r1, [r6, #0]
 80049ec:	4605      	mov	r5, r0
 80049ee:	b911      	cbnz	r1, 80049f6 <sbrk_aligned+0x12>
 80049f0:	f000 fe2a 	bl	8005648 <_sbrk_r>
 80049f4:	6030      	str	r0, [r6, #0]
 80049f6:	4621      	mov	r1, r4
 80049f8:	4628      	mov	r0, r5
 80049fa:	f000 fe25 	bl	8005648 <_sbrk_r>
 80049fe:	1c43      	adds	r3, r0, #1
 8004a00:	d103      	bne.n	8004a0a <sbrk_aligned+0x26>
 8004a02:	f04f 34ff 	mov.w	r4, #4294967295
 8004a06:	4620      	mov	r0, r4
 8004a08:	bd70      	pop	{r4, r5, r6, pc}
 8004a0a:	1cc4      	adds	r4, r0, #3
 8004a0c:	f024 0403 	bic.w	r4, r4, #3
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d0f8      	beq.n	8004a06 <sbrk_aligned+0x22>
 8004a14:	1a21      	subs	r1, r4, r0
 8004a16:	4628      	mov	r0, r5
 8004a18:	f000 fe16 	bl	8005648 <_sbrk_r>
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d1f2      	bne.n	8004a06 <sbrk_aligned+0x22>
 8004a20:	e7ef      	b.n	8004a02 <sbrk_aligned+0x1e>
 8004a22:	bf00      	nop
 8004a24:	20000370 	.word	0x20000370

08004a28 <_malloc_r>:
 8004a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a2c:	1ccd      	adds	r5, r1, #3
 8004a2e:	f025 0503 	bic.w	r5, r5, #3
 8004a32:	3508      	adds	r5, #8
 8004a34:	2d0c      	cmp	r5, #12
 8004a36:	bf38      	it	cc
 8004a38:	250c      	movcc	r5, #12
 8004a3a:	2d00      	cmp	r5, #0
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	db01      	blt.n	8004a44 <_malloc_r+0x1c>
 8004a40:	42a9      	cmp	r1, r5
 8004a42:	d904      	bls.n	8004a4e <_malloc_r+0x26>
 8004a44:	230c      	movs	r3, #12
 8004a46:	6033      	str	r3, [r6, #0]
 8004a48:	2000      	movs	r0, #0
 8004a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b24 <_malloc_r+0xfc>
 8004a52:	f000 f869 	bl	8004b28 <__malloc_lock>
 8004a56:	f8d8 3000 	ldr.w	r3, [r8]
 8004a5a:	461c      	mov	r4, r3
 8004a5c:	bb44      	cbnz	r4, 8004ab0 <_malloc_r+0x88>
 8004a5e:	4629      	mov	r1, r5
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff ffbf 	bl	80049e4 <sbrk_aligned>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	4604      	mov	r4, r0
 8004a6a:	d158      	bne.n	8004b1e <_malloc_r+0xf6>
 8004a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8004a70:	4627      	mov	r7, r4
 8004a72:	2f00      	cmp	r7, #0
 8004a74:	d143      	bne.n	8004afe <_malloc_r+0xd6>
 8004a76:	2c00      	cmp	r4, #0
 8004a78:	d04b      	beq.n	8004b12 <_malloc_r+0xea>
 8004a7a:	6823      	ldr	r3, [r4, #0]
 8004a7c:	4639      	mov	r1, r7
 8004a7e:	4630      	mov	r0, r6
 8004a80:	eb04 0903 	add.w	r9, r4, r3
 8004a84:	f000 fde0 	bl	8005648 <_sbrk_r>
 8004a88:	4581      	cmp	r9, r0
 8004a8a:	d142      	bne.n	8004b12 <_malloc_r+0xea>
 8004a8c:	6821      	ldr	r1, [r4, #0]
 8004a8e:	1a6d      	subs	r5, r5, r1
 8004a90:	4629      	mov	r1, r5
 8004a92:	4630      	mov	r0, r6
 8004a94:	f7ff ffa6 	bl	80049e4 <sbrk_aligned>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d03a      	beq.n	8004b12 <_malloc_r+0xea>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	442b      	add	r3, r5
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	bb62      	cbnz	r2, 8004b04 <_malloc_r+0xdc>
 8004aaa:	f8c8 7000 	str.w	r7, [r8]
 8004aae:	e00f      	b.n	8004ad0 <_malloc_r+0xa8>
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	1b52      	subs	r2, r2, r5
 8004ab4:	d420      	bmi.n	8004af8 <_malloc_r+0xd0>
 8004ab6:	2a0b      	cmp	r2, #11
 8004ab8:	d917      	bls.n	8004aea <_malloc_r+0xc2>
 8004aba:	1961      	adds	r1, r4, r5
 8004abc:	42a3      	cmp	r3, r4
 8004abe:	6025      	str	r5, [r4, #0]
 8004ac0:	bf18      	it	ne
 8004ac2:	6059      	strne	r1, [r3, #4]
 8004ac4:	6863      	ldr	r3, [r4, #4]
 8004ac6:	bf08      	it	eq
 8004ac8:	f8c8 1000 	streq.w	r1, [r8]
 8004acc:	5162      	str	r2, [r4, r5]
 8004ace:	604b      	str	r3, [r1, #4]
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	f000 f82f 	bl	8004b34 <__malloc_unlock>
 8004ad6:	f104 000b 	add.w	r0, r4, #11
 8004ada:	1d23      	adds	r3, r4, #4
 8004adc:	f020 0007 	bic.w	r0, r0, #7
 8004ae0:	1ac2      	subs	r2, r0, r3
 8004ae2:	bf1c      	itt	ne
 8004ae4:	1a1b      	subne	r3, r3, r0
 8004ae6:	50a3      	strne	r3, [r4, r2]
 8004ae8:	e7af      	b.n	8004a4a <_malloc_r+0x22>
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	bf0c      	ite	eq
 8004af0:	f8c8 2000 	streq.w	r2, [r8]
 8004af4:	605a      	strne	r2, [r3, #4]
 8004af6:	e7eb      	b.n	8004ad0 <_malloc_r+0xa8>
 8004af8:	4623      	mov	r3, r4
 8004afa:	6864      	ldr	r4, [r4, #4]
 8004afc:	e7ae      	b.n	8004a5c <_malloc_r+0x34>
 8004afe:	463c      	mov	r4, r7
 8004b00:	687f      	ldr	r7, [r7, #4]
 8004b02:	e7b6      	b.n	8004a72 <_malloc_r+0x4a>
 8004b04:	461a      	mov	r2, r3
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	d1fb      	bne.n	8004b04 <_malloc_r+0xdc>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6053      	str	r3, [r2, #4]
 8004b10:	e7de      	b.n	8004ad0 <_malloc_r+0xa8>
 8004b12:	230c      	movs	r3, #12
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	4630      	mov	r0, r6
 8004b18:	f000 f80c 	bl	8004b34 <__malloc_unlock>
 8004b1c:	e794      	b.n	8004a48 <_malloc_r+0x20>
 8004b1e:	6005      	str	r5, [r0, #0]
 8004b20:	e7d6      	b.n	8004ad0 <_malloc_r+0xa8>
 8004b22:	bf00      	nop
 8004b24:	20000374 	.word	0x20000374

08004b28 <__malloc_lock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	@ (8004b30 <__malloc_lock+0x8>)
 8004b2a:	f7ff bee0 	b.w	80048ee <__retarget_lock_acquire_recursive>
 8004b2e:	bf00      	nop
 8004b30:	2000036c 	.word	0x2000036c

08004b34 <__malloc_unlock>:
 8004b34:	4801      	ldr	r0, [pc, #4]	@ (8004b3c <__malloc_unlock+0x8>)
 8004b36:	f7ff bedb 	b.w	80048f0 <__retarget_lock_release_recursive>
 8004b3a:	bf00      	nop
 8004b3c:	2000036c 	.word	0x2000036c

08004b40 <__ssputs_r>:
 8004b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	688e      	ldr	r6, [r1, #8]
 8004b46:	461f      	mov	r7, r3
 8004b48:	42be      	cmp	r6, r7
 8004b4a:	680b      	ldr	r3, [r1, #0]
 8004b4c:	4682      	mov	sl, r0
 8004b4e:	460c      	mov	r4, r1
 8004b50:	4690      	mov	r8, r2
 8004b52:	d82d      	bhi.n	8004bb0 <__ssputs_r+0x70>
 8004b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b5c:	d026      	beq.n	8004bac <__ssputs_r+0x6c>
 8004b5e:	6965      	ldr	r5, [r4, #20]
 8004b60:	6909      	ldr	r1, [r1, #16]
 8004b62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b66:	eba3 0901 	sub.w	r9, r3, r1
 8004b6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b6e:	1c7b      	adds	r3, r7, #1
 8004b70:	444b      	add	r3, r9
 8004b72:	106d      	asrs	r5, r5, #1
 8004b74:	429d      	cmp	r5, r3
 8004b76:	bf38      	it	cc
 8004b78:	461d      	movcc	r5, r3
 8004b7a:	0553      	lsls	r3, r2, #21
 8004b7c:	d527      	bpl.n	8004bce <__ssputs_r+0x8e>
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7ff ff52 	bl	8004a28 <_malloc_r>
 8004b84:	4606      	mov	r6, r0
 8004b86:	b360      	cbz	r0, 8004be2 <__ssputs_r+0xa2>
 8004b88:	6921      	ldr	r1, [r4, #16]
 8004b8a:	464a      	mov	r2, r9
 8004b8c:	f000 fd6c 	bl	8005668 <memcpy>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	6126      	str	r6, [r4, #16]
 8004b9e:	6165      	str	r5, [r4, #20]
 8004ba0:	444e      	add	r6, r9
 8004ba2:	eba5 0509 	sub.w	r5, r5, r9
 8004ba6:	6026      	str	r6, [r4, #0]
 8004ba8:	60a5      	str	r5, [r4, #8]
 8004baa:	463e      	mov	r6, r7
 8004bac:	42be      	cmp	r6, r7
 8004bae:	d900      	bls.n	8004bb2 <__ssputs_r+0x72>
 8004bb0:	463e      	mov	r6, r7
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	4632      	mov	r2, r6
 8004bb6:	4641      	mov	r1, r8
 8004bb8:	f000 fd0a 	bl	80055d0 <memmove>
 8004bbc:	68a3      	ldr	r3, [r4, #8]
 8004bbe:	1b9b      	subs	r3, r3, r6
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	4433      	add	r3, r6
 8004bc6:	6023      	str	r3, [r4, #0]
 8004bc8:	2000      	movs	r0, #0
 8004bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bce:	462a      	mov	r2, r5
 8004bd0:	f000 fd5f 	bl	8005692 <_realloc_r>
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d1e0      	bne.n	8004b9c <__ssputs_r+0x5c>
 8004bda:	6921      	ldr	r1, [r4, #16]
 8004bdc:	4650      	mov	r0, sl
 8004bde:	f7ff feaf 	bl	8004940 <_free_r>
 8004be2:	230c      	movs	r3, #12
 8004be4:	f8ca 3000 	str.w	r3, [sl]
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e7e9      	b.n	8004bca <__ssputs_r+0x8a>
	...

08004bf8 <_svfiprintf_r>:
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	4698      	mov	r8, r3
 8004bfe:	898b      	ldrh	r3, [r1, #12]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	b09d      	sub	sp, #116	@ 0x74
 8004c04:	4607      	mov	r7, r0
 8004c06:	460d      	mov	r5, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	d510      	bpl.n	8004c2e <_svfiprintf_r+0x36>
 8004c0c:	690b      	ldr	r3, [r1, #16]
 8004c0e:	b973      	cbnz	r3, 8004c2e <_svfiprintf_r+0x36>
 8004c10:	2140      	movs	r1, #64	@ 0x40
 8004c12:	f7ff ff09 	bl	8004a28 <_malloc_r>
 8004c16:	6028      	str	r0, [r5, #0]
 8004c18:	6128      	str	r0, [r5, #16]
 8004c1a:	b930      	cbnz	r0, 8004c2a <_svfiprintf_r+0x32>
 8004c1c:	230c      	movs	r3, #12
 8004c1e:	603b      	str	r3, [r7, #0]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b01d      	add	sp, #116	@ 0x74
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	2340      	movs	r3, #64	@ 0x40
 8004c2c:	616b      	str	r3, [r5, #20]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c32:	2320      	movs	r3, #32
 8004c34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c38:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c3c:	2330      	movs	r3, #48	@ 0x30
 8004c3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ddc <_svfiprintf_r+0x1e4>
 8004c42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c46:	f04f 0901 	mov.w	r9, #1
 8004c4a:	4623      	mov	r3, r4
 8004c4c:	469a      	mov	sl, r3
 8004c4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c52:	b10a      	cbz	r2, 8004c58 <_svfiprintf_r+0x60>
 8004c54:	2a25      	cmp	r2, #37	@ 0x25
 8004c56:	d1f9      	bne.n	8004c4c <_svfiprintf_r+0x54>
 8004c58:	ebba 0b04 	subs.w	fp, sl, r4
 8004c5c:	d00b      	beq.n	8004c76 <_svfiprintf_r+0x7e>
 8004c5e:	465b      	mov	r3, fp
 8004c60:	4622      	mov	r2, r4
 8004c62:	4629      	mov	r1, r5
 8004c64:	4638      	mov	r0, r7
 8004c66:	f7ff ff6b 	bl	8004b40 <__ssputs_r>
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f000 80a7 	beq.w	8004dbe <_svfiprintf_r+0x1c6>
 8004c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c72:	445a      	add	r2, fp
 8004c74:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c76:	f89a 3000 	ldrb.w	r3, [sl]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 809f 	beq.w	8004dbe <_svfiprintf_r+0x1c6>
 8004c80:	2300      	movs	r3, #0
 8004c82:	f04f 32ff 	mov.w	r2, #4294967295
 8004c86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c8a:	f10a 0a01 	add.w	sl, sl, #1
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	9307      	str	r3, [sp, #28]
 8004c92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c96:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c98:	4654      	mov	r4, sl
 8004c9a:	2205      	movs	r2, #5
 8004c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca0:	484e      	ldr	r0, [pc, #312]	@ (8004ddc <_svfiprintf_r+0x1e4>)
 8004ca2:	f7fb fab5 	bl	8000210 <memchr>
 8004ca6:	9a04      	ldr	r2, [sp, #16]
 8004ca8:	b9d8      	cbnz	r0, 8004ce2 <_svfiprintf_r+0xea>
 8004caa:	06d0      	lsls	r0, r2, #27
 8004cac:	bf44      	itt	mi
 8004cae:	2320      	movmi	r3, #32
 8004cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cb4:	0711      	lsls	r1, r2, #28
 8004cb6:	bf44      	itt	mi
 8004cb8:	232b      	movmi	r3, #43	@ 0x2b
 8004cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cc4:	d015      	beq.n	8004cf2 <_svfiprintf_r+0xfa>
 8004cc6:	9a07      	ldr	r2, [sp, #28]
 8004cc8:	4654      	mov	r4, sl
 8004cca:	2000      	movs	r0, #0
 8004ccc:	f04f 0c0a 	mov.w	ip, #10
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cd6:	3b30      	subs	r3, #48	@ 0x30
 8004cd8:	2b09      	cmp	r3, #9
 8004cda:	d94b      	bls.n	8004d74 <_svfiprintf_r+0x17c>
 8004cdc:	b1b0      	cbz	r0, 8004d0c <_svfiprintf_r+0x114>
 8004cde:	9207      	str	r2, [sp, #28]
 8004ce0:	e014      	b.n	8004d0c <_svfiprintf_r+0x114>
 8004ce2:	eba0 0308 	sub.w	r3, r0, r8
 8004ce6:	fa09 f303 	lsl.w	r3, r9, r3
 8004cea:	4313      	orrs	r3, r2
 8004cec:	9304      	str	r3, [sp, #16]
 8004cee:	46a2      	mov	sl, r4
 8004cf0:	e7d2      	b.n	8004c98 <_svfiprintf_r+0xa0>
 8004cf2:	9b03      	ldr	r3, [sp, #12]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	9103      	str	r1, [sp, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bfbb      	ittet	lt
 8004cfe:	425b      	neglt	r3, r3
 8004d00:	f042 0202 	orrlt.w	r2, r2, #2
 8004d04:	9307      	strge	r3, [sp, #28]
 8004d06:	9307      	strlt	r3, [sp, #28]
 8004d08:	bfb8      	it	lt
 8004d0a:	9204      	strlt	r2, [sp, #16]
 8004d0c:	7823      	ldrb	r3, [r4, #0]
 8004d0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d10:	d10a      	bne.n	8004d28 <_svfiprintf_r+0x130>
 8004d12:	7863      	ldrb	r3, [r4, #1]
 8004d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d16:	d132      	bne.n	8004d7e <_svfiprintf_r+0x186>
 8004d18:	9b03      	ldr	r3, [sp, #12]
 8004d1a:	1d1a      	adds	r2, r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d24:	3402      	adds	r4, #2
 8004d26:	9305      	str	r3, [sp, #20]
 8004d28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004dec <_svfiprintf_r+0x1f4>
 8004d2c:	7821      	ldrb	r1, [r4, #0]
 8004d2e:	2203      	movs	r2, #3
 8004d30:	4650      	mov	r0, sl
 8004d32:	f7fb fa6d 	bl	8000210 <memchr>
 8004d36:	b138      	cbz	r0, 8004d48 <_svfiprintf_r+0x150>
 8004d38:	9b04      	ldr	r3, [sp, #16]
 8004d3a:	eba0 000a 	sub.w	r0, r0, sl
 8004d3e:	2240      	movs	r2, #64	@ 0x40
 8004d40:	4082      	lsls	r2, r0
 8004d42:	4313      	orrs	r3, r2
 8004d44:	3401      	adds	r4, #1
 8004d46:	9304      	str	r3, [sp, #16]
 8004d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d4c:	4824      	ldr	r0, [pc, #144]	@ (8004de0 <_svfiprintf_r+0x1e8>)
 8004d4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d52:	2206      	movs	r2, #6
 8004d54:	f7fb fa5c 	bl	8000210 <memchr>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d036      	beq.n	8004dca <_svfiprintf_r+0x1d2>
 8004d5c:	4b21      	ldr	r3, [pc, #132]	@ (8004de4 <_svfiprintf_r+0x1ec>)
 8004d5e:	bb1b      	cbnz	r3, 8004da8 <_svfiprintf_r+0x1b0>
 8004d60:	9b03      	ldr	r3, [sp, #12]
 8004d62:	3307      	adds	r3, #7
 8004d64:	f023 0307 	bic.w	r3, r3, #7
 8004d68:	3308      	adds	r3, #8
 8004d6a:	9303      	str	r3, [sp, #12]
 8004d6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d6e:	4433      	add	r3, r6
 8004d70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d72:	e76a      	b.n	8004c4a <_svfiprintf_r+0x52>
 8004d74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d78:	460c      	mov	r4, r1
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	e7a8      	b.n	8004cd0 <_svfiprintf_r+0xd8>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	3401      	adds	r4, #1
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	4619      	mov	r1, r3
 8004d86:	f04f 0c0a 	mov.w	ip, #10
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d90:	3a30      	subs	r2, #48	@ 0x30
 8004d92:	2a09      	cmp	r2, #9
 8004d94:	d903      	bls.n	8004d9e <_svfiprintf_r+0x1a6>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0c6      	beq.n	8004d28 <_svfiprintf_r+0x130>
 8004d9a:	9105      	str	r1, [sp, #20]
 8004d9c:	e7c4      	b.n	8004d28 <_svfiprintf_r+0x130>
 8004d9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004da2:	4604      	mov	r4, r0
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7f0      	b.n	8004d8a <_svfiprintf_r+0x192>
 8004da8:	ab03      	add	r3, sp, #12
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	462a      	mov	r2, r5
 8004dae:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <_svfiprintf_r+0x1f0>)
 8004db0:	a904      	add	r1, sp, #16
 8004db2:	4638      	mov	r0, r7
 8004db4:	f3af 8000 	nop.w
 8004db8:	1c42      	adds	r2, r0, #1
 8004dba:	4606      	mov	r6, r0
 8004dbc:	d1d6      	bne.n	8004d6c <_svfiprintf_r+0x174>
 8004dbe:	89ab      	ldrh	r3, [r5, #12]
 8004dc0:	065b      	lsls	r3, r3, #25
 8004dc2:	f53f af2d 	bmi.w	8004c20 <_svfiprintf_r+0x28>
 8004dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dc8:	e72c      	b.n	8004c24 <_svfiprintf_r+0x2c>
 8004dca:	ab03      	add	r3, sp, #12
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	462a      	mov	r2, r5
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <_svfiprintf_r+0x1f0>)
 8004dd2:	a904      	add	r1, sp, #16
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	f000 f9bb 	bl	8005150 <_printf_i>
 8004dda:	e7ed      	b.n	8004db8 <_svfiprintf_r+0x1c0>
 8004ddc:	080059ca 	.word	0x080059ca
 8004de0:	080059d4 	.word	0x080059d4
 8004de4:	00000000 	.word	0x00000000
 8004de8:	08004b41 	.word	0x08004b41
 8004dec:	080059d0 	.word	0x080059d0

08004df0 <__sfputc_r>:
 8004df0:	6893      	ldr	r3, [r2, #8]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	b410      	push	{r4}
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	da08      	bge.n	8004e0e <__sfputc_r+0x1e>
 8004dfc:	6994      	ldr	r4, [r2, #24]
 8004dfe:	42a3      	cmp	r3, r4
 8004e00:	db01      	blt.n	8004e06 <__sfputc_r+0x16>
 8004e02:	290a      	cmp	r1, #10
 8004e04:	d103      	bne.n	8004e0e <__sfputc_r+0x1e>
 8004e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e0a:	f7ff bc06 	b.w	800461a <__swbuf_r>
 8004e0e:	6813      	ldr	r3, [r2, #0]
 8004e10:	1c58      	adds	r0, r3, #1
 8004e12:	6010      	str	r0, [r2, #0]
 8004e14:	7019      	strb	r1, [r3, #0]
 8004e16:	4608      	mov	r0, r1
 8004e18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <__sfputs_r>:
 8004e1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e20:	4606      	mov	r6, r0
 8004e22:	460f      	mov	r7, r1
 8004e24:	4614      	mov	r4, r2
 8004e26:	18d5      	adds	r5, r2, r3
 8004e28:	42ac      	cmp	r4, r5
 8004e2a:	d101      	bne.n	8004e30 <__sfputs_r+0x12>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	e007      	b.n	8004e40 <__sfputs_r+0x22>
 8004e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e34:	463a      	mov	r2, r7
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7ff ffda 	bl	8004df0 <__sfputc_r>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d1f3      	bne.n	8004e28 <__sfputs_r+0xa>
 8004e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e44 <_vfiprintf_r>:
 8004e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e48:	460d      	mov	r5, r1
 8004e4a:	b09d      	sub	sp, #116	@ 0x74
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	4698      	mov	r8, r3
 8004e50:	4606      	mov	r6, r0
 8004e52:	b118      	cbz	r0, 8004e5c <_vfiprintf_r+0x18>
 8004e54:	6a03      	ldr	r3, [r0, #32]
 8004e56:	b90b      	cbnz	r3, 8004e5c <_vfiprintf_r+0x18>
 8004e58:	f7ff fad6 	bl	8004408 <__sinit>
 8004e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e5e:	07d9      	lsls	r1, r3, #31
 8004e60:	d405      	bmi.n	8004e6e <_vfiprintf_r+0x2a>
 8004e62:	89ab      	ldrh	r3, [r5, #12]
 8004e64:	059a      	lsls	r2, r3, #22
 8004e66:	d402      	bmi.n	8004e6e <_vfiprintf_r+0x2a>
 8004e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e6a:	f7ff fd40 	bl	80048ee <__retarget_lock_acquire_recursive>
 8004e6e:	89ab      	ldrh	r3, [r5, #12]
 8004e70:	071b      	lsls	r3, r3, #28
 8004e72:	d501      	bpl.n	8004e78 <_vfiprintf_r+0x34>
 8004e74:	692b      	ldr	r3, [r5, #16]
 8004e76:	b99b      	cbnz	r3, 8004ea0 <_vfiprintf_r+0x5c>
 8004e78:	4629      	mov	r1, r5
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f7ff fc0c 	bl	8004698 <__swsetup_r>
 8004e80:	b170      	cbz	r0, 8004ea0 <_vfiprintf_r+0x5c>
 8004e82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e84:	07dc      	lsls	r4, r3, #31
 8004e86:	d504      	bpl.n	8004e92 <_vfiprintf_r+0x4e>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	b01d      	add	sp, #116	@ 0x74
 8004e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e92:	89ab      	ldrh	r3, [r5, #12]
 8004e94:	0598      	lsls	r0, r3, #22
 8004e96:	d4f7      	bmi.n	8004e88 <_vfiprintf_r+0x44>
 8004e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e9a:	f7ff fd29 	bl	80048f0 <__retarget_lock_release_recursive>
 8004e9e:	e7f3      	b.n	8004e88 <_vfiprintf_r+0x44>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eae:	2330      	movs	r3, #48	@ 0x30
 8004eb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005060 <_vfiprintf_r+0x21c>
 8004eb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004eb8:	f04f 0901 	mov.w	r9, #1
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	469a      	mov	sl, r3
 8004ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ec4:	b10a      	cbz	r2, 8004eca <_vfiprintf_r+0x86>
 8004ec6:	2a25      	cmp	r2, #37	@ 0x25
 8004ec8:	d1f9      	bne.n	8004ebe <_vfiprintf_r+0x7a>
 8004eca:	ebba 0b04 	subs.w	fp, sl, r4
 8004ece:	d00b      	beq.n	8004ee8 <_vfiprintf_r+0xa4>
 8004ed0:	465b      	mov	r3, fp
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f7ff ffa1 	bl	8004e1e <__sfputs_r>
 8004edc:	3001      	adds	r0, #1
 8004ede:	f000 80a7 	beq.w	8005030 <_vfiprintf_r+0x1ec>
 8004ee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee4:	445a      	add	r2, fp
 8004ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 809f 	beq.w	8005030 <_vfiprintf_r+0x1ec>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004efc:	f10a 0a01 	add.w	sl, sl, #1
 8004f00:	9304      	str	r3, [sp, #16]
 8004f02:	9307      	str	r3, [sp, #28]
 8004f04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f08:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f0a:	4654      	mov	r4, sl
 8004f0c:	2205      	movs	r2, #5
 8004f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f12:	4853      	ldr	r0, [pc, #332]	@ (8005060 <_vfiprintf_r+0x21c>)
 8004f14:	f7fb f97c 	bl	8000210 <memchr>
 8004f18:	9a04      	ldr	r2, [sp, #16]
 8004f1a:	b9d8      	cbnz	r0, 8004f54 <_vfiprintf_r+0x110>
 8004f1c:	06d1      	lsls	r1, r2, #27
 8004f1e:	bf44      	itt	mi
 8004f20:	2320      	movmi	r3, #32
 8004f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f26:	0713      	lsls	r3, r2, #28
 8004f28:	bf44      	itt	mi
 8004f2a:	232b      	movmi	r3, #43	@ 0x2b
 8004f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f30:	f89a 3000 	ldrb.w	r3, [sl]
 8004f34:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f36:	d015      	beq.n	8004f64 <_vfiprintf_r+0x120>
 8004f38:	9a07      	ldr	r2, [sp, #28]
 8004f3a:	4654      	mov	r4, sl
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f04f 0c0a 	mov.w	ip, #10
 8004f42:	4621      	mov	r1, r4
 8004f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f48:	3b30      	subs	r3, #48	@ 0x30
 8004f4a:	2b09      	cmp	r3, #9
 8004f4c:	d94b      	bls.n	8004fe6 <_vfiprintf_r+0x1a2>
 8004f4e:	b1b0      	cbz	r0, 8004f7e <_vfiprintf_r+0x13a>
 8004f50:	9207      	str	r2, [sp, #28]
 8004f52:	e014      	b.n	8004f7e <_vfiprintf_r+0x13a>
 8004f54:	eba0 0308 	sub.w	r3, r0, r8
 8004f58:	fa09 f303 	lsl.w	r3, r9, r3
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	9304      	str	r3, [sp, #16]
 8004f60:	46a2      	mov	sl, r4
 8004f62:	e7d2      	b.n	8004f0a <_vfiprintf_r+0xc6>
 8004f64:	9b03      	ldr	r3, [sp, #12]
 8004f66:	1d19      	adds	r1, r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	9103      	str	r1, [sp, #12]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bfbb      	ittet	lt
 8004f70:	425b      	neglt	r3, r3
 8004f72:	f042 0202 	orrlt.w	r2, r2, #2
 8004f76:	9307      	strge	r3, [sp, #28]
 8004f78:	9307      	strlt	r3, [sp, #28]
 8004f7a:	bfb8      	it	lt
 8004f7c:	9204      	strlt	r2, [sp, #16]
 8004f7e:	7823      	ldrb	r3, [r4, #0]
 8004f80:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f82:	d10a      	bne.n	8004f9a <_vfiprintf_r+0x156>
 8004f84:	7863      	ldrb	r3, [r4, #1]
 8004f86:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f88:	d132      	bne.n	8004ff0 <_vfiprintf_r+0x1ac>
 8004f8a:	9b03      	ldr	r3, [sp, #12]
 8004f8c:	1d1a      	adds	r2, r3, #4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	9203      	str	r2, [sp, #12]
 8004f92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f96:	3402      	adds	r4, #2
 8004f98:	9305      	str	r3, [sp, #20]
 8004f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005070 <_vfiprintf_r+0x22c>
 8004f9e:	7821      	ldrb	r1, [r4, #0]
 8004fa0:	2203      	movs	r2, #3
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	f7fb f934 	bl	8000210 <memchr>
 8004fa8:	b138      	cbz	r0, 8004fba <_vfiprintf_r+0x176>
 8004faa:	9b04      	ldr	r3, [sp, #16]
 8004fac:	eba0 000a 	sub.w	r0, r0, sl
 8004fb0:	2240      	movs	r2, #64	@ 0x40
 8004fb2:	4082      	lsls	r2, r0
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	3401      	adds	r4, #1
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	4829      	ldr	r0, [pc, #164]	@ (8005064 <_vfiprintf_r+0x220>)
 8004fc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fc4:	2206      	movs	r2, #6
 8004fc6:	f7fb f923 	bl	8000210 <memchr>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d03f      	beq.n	800504e <_vfiprintf_r+0x20a>
 8004fce:	4b26      	ldr	r3, [pc, #152]	@ (8005068 <_vfiprintf_r+0x224>)
 8004fd0:	bb1b      	cbnz	r3, 800501a <_vfiprintf_r+0x1d6>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	3307      	adds	r3, #7
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	3308      	adds	r3, #8
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe0:	443b      	add	r3, r7
 8004fe2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe4:	e76a      	b.n	8004ebc <_vfiprintf_r+0x78>
 8004fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fea:	460c      	mov	r4, r1
 8004fec:	2001      	movs	r0, #1
 8004fee:	e7a8      	b.n	8004f42 <_vfiprintf_r+0xfe>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	3401      	adds	r4, #1
 8004ff4:	9305      	str	r3, [sp, #20]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f04f 0c0a 	mov.w	ip, #10
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005002:	3a30      	subs	r2, #48	@ 0x30
 8005004:	2a09      	cmp	r2, #9
 8005006:	d903      	bls.n	8005010 <_vfiprintf_r+0x1cc>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0c6      	beq.n	8004f9a <_vfiprintf_r+0x156>
 800500c:	9105      	str	r1, [sp, #20]
 800500e:	e7c4      	b.n	8004f9a <_vfiprintf_r+0x156>
 8005010:	fb0c 2101 	mla	r1, ip, r1, r2
 8005014:	4604      	mov	r4, r0
 8005016:	2301      	movs	r3, #1
 8005018:	e7f0      	b.n	8004ffc <_vfiprintf_r+0x1b8>
 800501a:	ab03      	add	r3, sp, #12
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	462a      	mov	r2, r5
 8005020:	4b12      	ldr	r3, [pc, #72]	@ (800506c <_vfiprintf_r+0x228>)
 8005022:	a904      	add	r1, sp, #16
 8005024:	4630      	mov	r0, r6
 8005026:	f3af 8000 	nop.w
 800502a:	4607      	mov	r7, r0
 800502c:	1c78      	adds	r0, r7, #1
 800502e:	d1d6      	bne.n	8004fde <_vfiprintf_r+0x19a>
 8005030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005032:	07d9      	lsls	r1, r3, #31
 8005034:	d405      	bmi.n	8005042 <_vfiprintf_r+0x1fe>
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	059a      	lsls	r2, r3, #22
 800503a:	d402      	bmi.n	8005042 <_vfiprintf_r+0x1fe>
 800503c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800503e:	f7ff fc57 	bl	80048f0 <__retarget_lock_release_recursive>
 8005042:	89ab      	ldrh	r3, [r5, #12]
 8005044:	065b      	lsls	r3, r3, #25
 8005046:	f53f af1f 	bmi.w	8004e88 <_vfiprintf_r+0x44>
 800504a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800504c:	e71e      	b.n	8004e8c <_vfiprintf_r+0x48>
 800504e:	ab03      	add	r3, sp, #12
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	462a      	mov	r2, r5
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <_vfiprintf_r+0x228>)
 8005056:	a904      	add	r1, sp, #16
 8005058:	4630      	mov	r0, r6
 800505a:	f000 f879 	bl	8005150 <_printf_i>
 800505e:	e7e4      	b.n	800502a <_vfiprintf_r+0x1e6>
 8005060:	080059ca 	.word	0x080059ca
 8005064:	080059d4 	.word	0x080059d4
 8005068:	00000000 	.word	0x00000000
 800506c:	08004e1f 	.word	0x08004e1f
 8005070:	080059d0 	.word	0x080059d0

08005074 <_printf_common>:
 8005074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	4616      	mov	r6, r2
 800507a:	4698      	mov	r8, r3
 800507c:	688a      	ldr	r2, [r1, #8]
 800507e:	690b      	ldr	r3, [r1, #16]
 8005080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005084:	4293      	cmp	r3, r2
 8005086:	bfb8      	it	lt
 8005088:	4613      	movlt	r3, r2
 800508a:	6033      	str	r3, [r6, #0]
 800508c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005090:	4607      	mov	r7, r0
 8005092:	460c      	mov	r4, r1
 8005094:	b10a      	cbz	r2, 800509a <_printf_common+0x26>
 8005096:	3301      	adds	r3, #1
 8005098:	6033      	str	r3, [r6, #0]
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	0699      	lsls	r1, r3, #26
 800509e:	bf42      	ittt	mi
 80050a0:	6833      	ldrmi	r3, [r6, #0]
 80050a2:	3302      	addmi	r3, #2
 80050a4:	6033      	strmi	r3, [r6, #0]
 80050a6:	6825      	ldr	r5, [r4, #0]
 80050a8:	f015 0506 	ands.w	r5, r5, #6
 80050ac:	d106      	bne.n	80050bc <_printf_common+0x48>
 80050ae:	f104 0a19 	add.w	sl, r4, #25
 80050b2:	68e3      	ldr	r3, [r4, #12]
 80050b4:	6832      	ldr	r2, [r6, #0]
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	42ab      	cmp	r3, r5
 80050ba:	dc26      	bgt.n	800510a <_printf_common+0x96>
 80050bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	3b00      	subs	r3, #0
 80050c4:	bf18      	it	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	0692      	lsls	r2, r2, #26
 80050ca:	d42b      	bmi.n	8005124 <_printf_common+0xb0>
 80050cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050d0:	4641      	mov	r1, r8
 80050d2:	4638      	mov	r0, r7
 80050d4:	47c8      	blx	r9
 80050d6:	3001      	adds	r0, #1
 80050d8:	d01e      	beq.n	8005118 <_printf_common+0xa4>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	f003 0306 	and.w	r3, r3, #6
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	bf02      	ittt	eq
 80050e6:	68e5      	ldreq	r5, [r4, #12]
 80050e8:	6833      	ldreq	r3, [r6, #0]
 80050ea:	1aed      	subeq	r5, r5, r3
 80050ec:	68a3      	ldr	r3, [r4, #8]
 80050ee:	bf0c      	ite	eq
 80050f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f4:	2500      	movne	r5, #0
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bfc4      	itt	gt
 80050fa:	1a9b      	subgt	r3, r3, r2
 80050fc:	18ed      	addgt	r5, r5, r3
 80050fe:	2600      	movs	r6, #0
 8005100:	341a      	adds	r4, #26
 8005102:	42b5      	cmp	r5, r6
 8005104:	d11a      	bne.n	800513c <_printf_common+0xc8>
 8005106:	2000      	movs	r0, #0
 8005108:	e008      	b.n	800511c <_printf_common+0xa8>
 800510a:	2301      	movs	r3, #1
 800510c:	4652      	mov	r2, sl
 800510e:	4641      	mov	r1, r8
 8005110:	4638      	mov	r0, r7
 8005112:	47c8      	blx	r9
 8005114:	3001      	adds	r0, #1
 8005116:	d103      	bne.n	8005120 <_printf_common+0xac>
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005120:	3501      	adds	r5, #1
 8005122:	e7c6      	b.n	80050b2 <_printf_common+0x3e>
 8005124:	18e1      	adds	r1, r4, r3
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	2030      	movs	r0, #48	@ 0x30
 800512a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800512e:	4422      	add	r2, r4
 8005130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005134:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005138:	3302      	adds	r3, #2
 800513a:	e7c7      	b.n	80050cc <_printf_common+0x58>
 800513c:	2301      	movs	r3, #1
 800513e:	4622      	mov	r2, r4
 8005140:	4641      	mov	r1, r8
 8005142:	4638      	mov	r0, r7
 8005144:	47c8      	blx	r9
 8005146:	3001      	adds	r0, #1
 8005148:	d0e6      	beq.n	8005118 <_printf_common+0xa4>
 800514a:	3601      	adds	r6, #1
 800514c:	e7d9      	b.n	8005102 <_printf_common+0x8e>
	...

08005150 <_printf_i>:
 8005150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	7e0f      	ldrb	r7, [r1, #24]
 8005156:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005158:	2f78      	cmp	r7, #120	@ 0x78
 800515a:	4691      	mov	r9, r2
 800515c:	4680      	mov	r8, r0
 800515e:	460c      	mov	r4, r1
 8005160:	469a      	mov	sl, r3
 8005162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005166:	d807      	bhi.n	8005178 <_printf_i+0x28>
 8005168:	2f62      	cmp	r7, #98	@ 0x62
 800516a:	d80a      	bhi.n	8005182 <_printf_i+0x32>
 800516c:	2f00      	cmp	r7, #0
 800516e:	f000 80d2 	beq.w	8005316 <_printf_i+0x1c6>
 8005172:	2f58      	cmp	r7, #88	@ 0x58
 8005174:	f000 80b9 	beq.w	80052ea <_printf_i+0x19a>
 8005178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800517c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005180:	e03a      	b.n	80051f8 <_printf_i+0xa8>
 8005182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005186:	2b15      	cmp	r3, #21
 8005188:	d8f6      	bhi.n	8005178 <_printf_i+0x28>
 800518a:	a101      	add	r1, pc, #4	@ (adr r1, 8005190 <_printf_i+0x40>)
 800518c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051fd 	.word	0x080051fd
 8005198:	08005179 	.word	0x08005179
 800519c:	08005179 	.word	0x08005179
 80051a0:	08005179 	.word	0x08005179
 80051a4:	08005179 	.word	0x08005179
 80051a8:	080051fd 	.word	0x080051fd
 80051ac:	08005179 	.word	0x08005179
 80051b0:	08005179 	.word	0x08005179
 80051b4:	08005179 	.word	0x08005179
 80051b8:	08005179 	.word	0x08005179
 80051bc:	080052fd 	.word	0x080052fd
 80051c0:	08005227 	.word	0x08005227
 80051c4:	080052b7 	.word	0x080052b7
 80051c8:	08005179 	.word	0x08005179
 80051cc:	08005179 	.word	0x08005179
 80051d0:	0800531f 	.word	0x0800531f
 80051d4:	08005179 	.word	0x08005179
 80051d8:	08005227 	.word	0x08005227
 80051dc:	08005179 	.word	0x08005179
 80051e0:	08005179 	.word	0x08005179
 80051e4:	080052bf 	.word	0x080052bf
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6032      	str	r2, [r6, #0]
 80051f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051f8:	2301      	movs	r3, #1
 80051fa:	e09d      	b.n	8005338 <_printf_i+0x1e8>
 80051fc:	6833      	ldr	r3, [r6, #0]
 80051fe:	6820      	ldr	r0, [r4, #0]
 8005200:	1d19      	adds	r1, r3, #4
 8005202:	6031      	str	r1, [r6, #0]
 8005204:	0606      	lsls	r6, r0, #24
 8005206:	d501      	bpl.n	800520c <_printf_i+0xbc>
 8005208:	681d      	ldr	r5, [r3, #0]
 800520a:	e003      	b.n	8005214 <_printf_i+0xc4>
 800520c:	0645      	lsls	r5, r0, #25
 800520e:	d5fb      	bpl.n	8005208 <_printf_i+0xb8>
 8005210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005214:	2d00      	cmp	r5, #0
 8005216:	da03      	bge.n	8005220 <_printf_i+0xd0>
 8005218:	232d      	movs	r3, #45	@ 0x2d
 800521a:	426d      	negs	r5, r5
 800521c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005220:	4859      	ldr	r0, [pc, #356]	@ (8005388 <_printf_i+0x238>)
 8005222:	230a      	movs	r3, #10
 8005224:	e011      	b.n	800524a <_printf_i+0xfa>
 8005226:	6821      	ldr	r1, [r4, #0]
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	0608      	lsls	r0, r1, #24
 800522c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005230:	d402      	bmi.n	8005238 <_printf_i+0xe8>
 8005232:	0649      	lsls	r1, r1, #25
 8005234:	bf48      	it	mi
 8005236:	b2ad      	uxthmi	r5, r5
 8005238:	2f6f      	cmp	r7, #111	@ 0x6f
 800523a:	4853      	ldr	r0, [pc, #332]	@ (8005388 <_printf_i+0x238>)
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	bf14      	ite	ne
 8005240:	230a      	movne	r3, #10
 8005242:	2308      	moveq	r3, #8
 8005244:	2100      	movs	r1, #0
 8005246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800524a:	6866      	ldr	r6, [r4, #4]
 800524c:	60a6      	str	r6, [r4, #8]
 800524e:	2e00      	cmp	r6, #0
 8005250:	bfa2      	ittt	ge
 8005252:	6821      	ldrge	r1, [r4, #0]
 8005254:	f021 0104 	bicge.w	r1, r1, #4
 8005258:	6021      	strge	r1, [r4, #0]
 800525a:	b90d      	cbnz	r5, 8005260 <_printf_i+0x110>
 800525c:	2e00      	cmp	r6, #0
 800525e:	d04b      	beq.n	80052f8 <_printf_i+0x1a8>
 8005260:	4616      	mov	r6, r2
 8005262:	fbb5 f1f3 	udiv	r1, r5, r3
 8005266:	fb03 5711 	mls	r7, r3, r1, r5
 800526a:	5dc7      	ldrb	r7, [r0, r7]
 800526c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005270:	462f      	mov	r7, r5
 8005272:	42bb      	cmp	r3, r7
 8005274:	460d      	mov	r5, r1
 8005276:	d9f4      	bls.n	8005262 <_printf_i+0x112>
 8005278:	2b08      	cmp	r3, #8
 800527a:	d10b      	bne.n	8005294 <_printf_i+0x144>
 800527c:	6823      	ldr	r3, [r4, #0]
 800527e:	07df      	lsls	r7, r3, #31
 8005280:	d508      	bpl.n	8005294 <_printf_i+0x144>
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	6861      	ldr	r1, [r4, #4]
 8005286:	4299      	cmp	r1, r3
 8005288:	bfde      	ittt	le
 800528a:	2330      	movle	r3, #48	@ 0x30
 800528c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005290:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005294:	1b92      	subs	r2, r2, r6
 8005296:	6122      	str	r2, [r4, #16]
 8005298:	f8cd a000 	str.w	sl, [sp]
 800529c:	464b      	mov	r3, r9
 800529e:	aa03      	add	r2, sp, #12
 80052a0:	4621      	mov	r1, r4
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7ff fee6 	bl	8005074 <_printf_common>
 80052a8:	3001      	adds	r0, #1
 80052aa:	d14a      	bne.n	8005342 <_printf_i+0x1f2>
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	b004      	add	sp, #16
 80052b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f043 0320 	orr.w	r3, r3, #32
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	4833      	ldr	r0, [pc, #204]	@ (800538c <_printf_i+0x23c>)
 80052c0:	2778      	movs	r7, #120	@ 0x78
 80052c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	6831      	ldr	r1, [r6, #0]
 80052ca:	061f      	lsls	r7, r3, #24
 80052cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80052d0:	d402      	bmi.n	80052d8 <_printf_i+0x188>
 80052d2:	065f      	lsls	r7, r3, #25
 80052d4:	bf48      	it	mi
 80052d6:	b2ad      	uxthmi	r5, r5
 80052d8:	6031      	str	r1, [r6, #0]
 80052da:	07d9      	lsls	r1, r3, #31
 80052dc:	bf44      	itt	mi
 80052de:	f043 0320 	orrmi.w	r3, r3, #32
 80052e2:	6023      	strmi	r3, [r4, #0]
 80052e4:	b11d      	cbz	r5, 80052ee <_printf_i+0x19e>
 80052e6:	2310      	movs	r3, #16
 80052e8:	e7ac      	b.n	8005244 <_printf_i+0xf4>
 80052ea:	4827      	ldr	r0, [pc, #156]	@ (8005388 <_printf_i+0x238>)
 80052ec:	e7e9      	b.n	80052c2 <_printf_i+0x172>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	f023 0320 	bic.w	r3, r3, #32
 80052f4:	6023      	str	r3, [r4, #0]
 80052f6:	e7f6      	b.n	80052e6 <_printf_i+0x196>
 80052f8:	4616      	mov	r6, r2
 80052fa:	e7bd      	b.n	8005278 <_printf_i+0x128>
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	6961      	ldr	r1, [r4, #20]
 8005302:	1d18      	adds	r0, r3, #4
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	062e      	lsls	r6, r5, #24
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	d501      	bpl.n	8005310 <_printf_i+0x1c0>
 800530c:	6019      	str	r1, [r3, #0]
 800530e:	e002      	b.n	8005316 <_printf_i+0x1c6>
 8005310:	0668      	lsls	r0, r5, #25
 8005312:	d5fb      	bpl.n	800530c <_printf_i+0x1bc>
 8005314:	8019      	strh	r1, [r3, #0]
 8005316:	2300      	movs	r3, #0
 8005318:	6123      	str	r3, [r4, #16]
 800531a:	4616      	mov	r6, r2
 800531c:	e7bc      	b.n	8005298 <_printf_i+0x148>
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	6032      	str	r2, [r6, #0]
 8005324:	681e      	ldr	r6, [r3, #0]
 8005326:	6862      	ldr	r2, [r4, #4]
 8005328:	2100      	movs	r1, #0
 800532a:	4630      	mov	r0, r6
 800532c:	f7fa ff70 	bl	8000210 <memchr>
 8005330:	b108      	cbz	r0, 8005336 <_printf_i+0x1e6>
 8005332:	1b80      	subs	r0, r0, r6
 8005334:	6060      	str	r0, [r4, #4]
 8005336:	6863      	ldr	r3, [r4, #4]
 8005338:	6123      	str	r3, [r4, #16]
 800533a:	2300      	movs	r3, #0
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005340:	e7aa      	b.n	8005298 <_printf_i+0x148>
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	4632      	mov	r2, r6
 8005346:	4649      	mov	r1, r9
 8005348:	4640      	mov	r0, r8
 800534a:	47d0      	blx	sl
 800534c:	3001      	adds	r0, #1
 800534e:	d0ad      	beq.n	80052ac <_printf_i+0x15c>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	079b      	lsls	r3, r3, #30
 8005354:	d413      	bmi.n	800537e <_printf_i+0x22e>
 8005356:	68e0      	ldr	r0, [r4, #12]
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	4298      	cmp	r0, r3
 800535c:	bfb8      	it	lt
 800535e:	4618      	movlt	r0, r3
 8005360:	e7a6      	b.n	80052b0 <_printf_i+0x160>
 8005362:	2301      	movs	r3, #1
 8005364:	4632      	mov	r2, r6
 8005366:	4649      	mov	r1, r9
 8005368:	4640      	mov	r0, r8
 800536a:	47d0      	blx	sl
 800536c:	3001      	adds	r0, #1
 800536e:	d09d      	beq.n	80052ac <_printf_i+0x15c>
 8005370:	3501      	adds	r5, #1
 8005372:	68e3      	ldr	r3, [r4, #12]
 8005374:	9903      	ldr	r1, [sp, #12]
 8005376:	1a5b      	subs	r3, r3, r1
 8005378:	42ab      	cmp	r3, r5
 800537a:	dcf2      	bgt.n	8005362 <_printf_i+0x212>
 800537c:	e7eb      	b.n	8005356 <_printf_i+0x206>
 800537e:	2500      	movs	r5, #0
 8005380:	f104 0619 	add.w	r6, r4, #25
 8005384:	e7f5      	b.n	8005372 <_printf_i+0x222>
 8005386:	bf00      	nop
 8005388:	080059db 	.word	0x080059db
 800538c:	080059ec 	.word	0x080059ec

08005390 <__sflush_r>:
 8005390:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005398:	0716      	lsls	r6, r2, #28
 800539a:	4605      	mov	r5, r0
 800539c:	460c      	mov	r4, r1
 800539e:	d454      	bmi.n	800544a <__sflush_r+0xba>
 80053a0:	684b      	ldr	r3, [r1, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dc02      	bgt.n	80053ac <__sflush_r+0x1c>
 80053a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	dd48      	ble.n	800543e <__sflush_r+0xae>
 80053ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	d045      	beq.n	800543e <__sflush_r+0xae>
 80053b2:	2300      	movs	r3, #0
 80053b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053b8:	682f      	ldr	r7, [r5, #0]
 80053ba:	6a21      	ldr	r1, [r4, #32]
 80053bc:	602b      	str	r3, [r5, #0]
 80053be:	d030      	beq.n	8005422 <__sflush_r+0x92>
 80053c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053c2:	89a3      	ldrh	r3, [r4, #12]
 80053c4:	0759      	lsls	r1, r3, #29
 80053c6:	d505      	bpl.n	80053d4 <__sflush_r+0x44>
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053ce:	b10b      	cbz	r3, 80053d4 <__sflush_r+0x44>
 80053d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053d2:	1ad2      	subs	r2, r2, r3
 80053d4:	2300      	movs	r3, #0
 80053d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053d8:	6a21      	ldr	r1, [r4, #32]
 80053da:	4628      	mov	r0, r5
 80053dc:	47b0      	blx	r6
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	d106      	bne.n	80053f2 <__sflush_r+0x62>
 80053e4:	6829      	ldr	r1, [r5, #0]
 80053e6:	291d      	cmp	r1, #29
 80053e8:	d82b      	bhi.n	8005442 <__sflush_r+0xb2>
 80053ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005494 <__sflush_r+0x104>)
 80053ec:	410a      	asrs	r2, r1
 80053ee:	07d6      	lsls	r6, r2, #31
 80053f0:	d427      	bmi.n	8005442 <__sflush_r+0xb2>
 80053f2:	2200      	movs	r2, #0
 80053f4:	6062      	str	r2, [r4, #4]
 80053f6:	04d9      	lsls	r1, r3, #19
 80053f8:	6922      	ldr	r2, [r4, #16]
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	d504      	bpl.n	8005408 <__sflush_r+0x78>
 80053fe:	1c42      	adds	r2, r0, #1
 8005400:	d101      	bne.n	8005406 <__sflush_r+0x76>
 8005402:	682b      	ldr	r3, [r5, #0]
 8005404:	b903      	cbnz	r3, 8005408 <__sflush_r+0x78>
 8005406:	6560      	str	r0, [r4, #84]	@ 0x54
 8005408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800540a:	602f      	str	r7, [r5, #0]
 800540c:	b1b9      	cbz	r1, 800543e <__sflush_r+0xae>
 800540e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005412:	4299      	cmp	r1, r3
 8005414:	d002      	beq.n	800541c <__sflush_r+0x8c>
 8005416:	4628      	mov	r0, r5
 8005418:	f7ff fa92 	bl	8004940 <_free_r>
 800541c:	2300      	movs	r3, #0
 800541e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005420:	e00d      	b.n	800543e <__sflush_r+0xae>
 8005422:	2301      	movs	r3, #1
 8005424:	4628      	mov	r0, r5
 8005426:	47b0      	blx	r6
 8005428:	4602      	mov	r2, r0
 800542a:	1c50      	adds	r0, r2, #1
 800542c:	d1c9      	bne.n	80053c2 <__sflush_r+0x32>
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0c6      	beq.n	80053c2 <__sflush_r+0x32>
 8005434:	2b1d      	cmp	r3, #29
 8005436:	d001      	beq.n	800543c <__sflush_r+0xac>
 8005438:	2b16      	cmp	r3, #22
 800543a:	d11e      	bne.n	800547a <__sflush_r+0xea>
 800543c:	602f      	str	r7, [r5, #0]
 800543e:	2000      	movs	r0, #0
 8005440:	e022      	b.n	8005488 <__sflush_r+0xf8>
 8005442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005446:	b21b      	sxth	r3, r3
 8005448:	e01b      	b.n	8005482 <__sflush_r+0xf2>
 800544a:	690f      	ldr	r7, [r1, #16]
 800544c:	2f00      	cmp	r7, #0
 800544e:	d0f6      	beq.n	800543e <__sflush_r+0xae>
 8005450:	0793      	lsls	r3, r2, #30
 8005452:	680e      	ldr	r6, [r1, #0]
 8005454:	bf08      	it	eq
 8005456:	694b      	ldreq	r3, [r1, #20]
 8005458:	600f      	str	r7, [r1, #0]
 800545a:	bf18      	it	ne
 800545c:	2300      	movne	r3, #0
 800545e:	eba6 0807 	sub.w	r8, r6, r7
 8005462:	608b      	str	r3, [r1, #8]
 8005464:	f1b8 0f00 	cmp.w	r8, #0
 8005468:	dde9      	ble.n	800543e <__sflush_r+0xae>
 800546a:	6a21      	ldr	r1, [r4, #32]
 800546c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800546e:	4643      	mov	r3, r8
 8005470:	463a      	mov	r2, r7
 8005472:	4628      	mov	r0, r5
 8005474:	47b0      	blx	r6
 8005476:	2800      	cmp	r0, #0
 8005478:	dc08      	bgt.n	800548c <__sflush_r+0xfc>
 800547a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	f04f 30ff 	mov.w	r0, #4294967295
 8005488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800548c:	4407      	add	r7, r0
 800548e:	eba8 0800 	sub.w	r8, r8, r0
 8005492:	e7e7      	b.n	8005464 <__sflush_r+0xd4>
 8005494:	dfbffffe 	.word	0xdfbffffe

08005498 <_fflush_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	690b      	ldr	r3, [r1, #16]
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	b913      	cbnz	r3, 80054a8 <_fflush_r+0x10>
 80054a2:	2500      	movs	r5, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	b118      	cbz	r0, 80054b2 <_fflush_r+0x1a>
 80054aa:	6a03      	ldr	r3, [r0, #32]
 80054ac:	b90b      	cbnz	r3, 80054b2 <_fflush_r+0x1a>
 80054ae:	f7fe ffab 	bl	8004408 <__sinit>
 80054b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f3      	beq.n	80054a2 <_fflush_r+0xa>
 80054ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054bc:	07d0      	lsls	r0, r2, #31
 80054be:	d404      	bmi.n	80054ca <_fflush_r+0x32>
 80054c0:	0599      	lsls	r1, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_fflush_r+0x32>
 80054c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c6:	f7ff fa12 	bl	80048ee <__retarget_lock_acquire_recursive>
 80054ca:	4628      	mov	r0, r5
 80054cc:	4621      	mov	r1, r4
 80054ce:	f7ff ff5f 	bl	8005390 <__sflush_r>
 80054d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054d4:	07da      	lsls	r2, r3, #31
 80054d6:	4605      	mov	r5, r0
 80054d8:	d4e4      	bmi.n	80054a4 <_fflush_r+0xc>
 80054da:	89a3      	ldrh	r3, [r4, #12]
 80054dc:	059b      	lsls	r3, r3, #22
 80054de:	d4e1      	bmi.n	80054a4 <_fflush_r+0xc>
 80054e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054e2:	f7ff fa05 	bl	80048f0 <__retarget_lock_release_recursive>
 80054e6:	e7dd      	b.n	80054a4 <_fflush_r+0xc>

080054e8 <fiprintf>:
 80054e8:	b40e      	push	{r1, r2, r3}
 80054ea:	b503      	push	{r0, r1, lr}
 80054ec:	4601      	mov	r1, r0
 80054ee:	ab03      	add	r3, sp, #12
 80054f0:	4805      	ldr	r0, [pc, #20]	@ (8005508 <fiprintf+0x20>)
 80054f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054f6:	6800      	ldr	r0, [r0, #0]
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f7ff fca3 	bl	8004e44 <_vfiprintf_r>
 80054fe:	b002      	add	sp, #8
 8005500:	f85d eb04 	ldr.w	lr, [sp], #4
 8005504:	b003      	add	sp, #12
 8005506:	4770      	bx	lr
 8005508:	20000018 	.word	0x20000018

0800550c <__swhatbuf_r>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	460c      	mov	r4, r1
 8005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005514:	2900      	cmp	r1, #0
 8005516:	b096      	sub	sp, #88	@ 0x58
 8005518:	4615      	mov	r5, r2
 800551a:	461e      	mov	r6, r3
 800551c:	da0d      	bge.n	800553a <__swhatbuf_r+0x2e>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005524:	f04f 0100 	mov.w	r1, #0
 8005528:	bf14      	ite	ne
 800552a:	2340      	movne	r3, #64	@ 0x40
 800552c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005530:	2000      	movs	r0, #0
 8005532:	6031      	str	r1, [r6, #0]
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	b016      	add	sp, #88	@ 0x58
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	466a      	mov	r2, sp
 800553c:	f000 f862 	bl	8005604 <_fstat_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	dbec      	blt.n	800551e <__swhatbuf_r+0x12>
 8005544:	9901      	ldr	r1, [sp, #4]
 8005546:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800554a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800554e:	4259      	negs	r1, r3
 8005550:	4159      	adcs	r1, r3
 8005552:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005556:	e7eb      	b.n	8005530 <__swhatbuf_r+0x24>

08005558 <__smakebuf_r>:
 8005558:	898b      	ldrh	r3, [r1, #12]
 800555a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555c:	079d      	lsls	r5, r3, #30
 800555e:	4606      	mov	r6, r0
 8005560:	460c      	mov	r4, r1
 8005562:	d507      	bpl.n	8005574 <__smakebuf_r+0x1c>
 8005564:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	6123      	str	r3, [r4, #16]
 800556c:	2301      	movs	r3, #1
 800556e:	6163      	str	r3, [r4, #20]
 8005570:	b003      	add	sp, #12
 8005572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005574:	ab01      	add	r3, sp, #4
 8005576:	466a      	mov	r2, sp
 8005578:	f7ff ffc8 	bl	800550c <__swhatbuf_r>
 800557c:	9f00      	ldr	r7, [sp, #0]
 800557e:	4605      	mov	r5, r0
 8005580:	4639      	mov	r1, r7
 8005582:	4630      	mov	r0, r6
 8005584:	f7ff fa50 	bl	8004a28 <_malloc_r>
 8005588:	b948      	cbnz	r0, 800559e <__smakebuf_r+0x46>
 800558a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558e:	059a      	lsls	r2, r3, #22
 8005590:	d4ee      	bmi.n	8005570 <__smakebuf_r+0x18>
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	e7e2      	b.n	8005564 <__smakebuf_r+0xc>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	6020      	str	r0, [r4, #0]
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055ae:	b15b      	cbz	r3, 80055c8 <__smakebuf_r+0x70>
 80055b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b4:	4630      	mov	r0, r6
 80055b6:	f000 f837 	bl	8005628 <_isatty_r>
 80055ba:	b128      	cbz	r0, 80055c8 <__smakebuf_r+0x70>
 80055bc:	89a3      	ldrh	r3, [r4, #12]
 80055be:	f023 0303 	bic.w	r3, r3, #3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	89a3      	ldrh	r3, [r4, #12]
 80055ca:	431d      	orrs	r5, r3
 80055cc:	81a5      	strh	r5, [r4, #12]
 80055ce:	e7cf      	b.n	8005570 <__smakebuf_r+0x18>

080055d0 <memmove>:
 80055d0:	4288      	cmp	r0, r1
 80055d2:	b510      	push	{r4, lr}
 80055d4:	eb01 0402 	add.w	r4, r1, r2
 80055d8:	d902      	bls.n	80055e0 <memmove+0x10>
 80055da:	4284      	cmp	r4, r0
 80055dc:	4623      	mov	r3, r4
 80055de:	d807      	bhi.n	80055f0 <memmove+0x20>
 80055e0:	1e43      	subs	r3, r0, #1
 80055e2:	42a1      	cmp	r1, r4
 80055e4:	d008      	beq.n	80055f8 <memmove+0x28>
 80055e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055ee:	e7f8      	b.n	80055e2 <memmove+0x12>
 80055f0:	4402      	add	r2, r0
 80055f2:	4601      	mov	r1, r0
 80055f4:	428a      	cmp	r2, r1
 80055f6:	d100      	bne.n	80055fa <memmove+0x2a>
 80055f8:	bd10      	pop	{r4, pc}
 80055fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005602:	e7f7      	b.n	80055f4 <memmove+0x24>

08005604 <_fstat_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	4d07      	ldr	r5, [pc, #28]	@ (8005624 <_fstat_r+0x20>)
 8005608:	2300      	movs	r3, #0
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	4611      	mov	r1, r2
 8005610:	602b      	str	r3, [r5, #0]
 8005612:	f7fb fe1d 	bl	8001250 <_fstat>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d102      	bne.n	8005620 <_fstat_r+0x1c>
 800561a:	682b      	ldr	r3, [r5, #0]
 800561c:	b103      	cbz	r3, 8005620 <_fstat_r+0x1c>
 800561e:	6023      	str	r3, [r4, #0]
 8005620:	bd38      	pop	{r3, r4, r5, pc}
 8005622:	bf00      	nop
 8005624:	20000368 	.word	0x20000368

08005628 <_isatty_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d06      	ldr	r5, [pc, #24]	@ (8005644 <_isatty_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4604      	mov	r4, r0
 8005630:	4608      	mov	r0, r1
 8005632:	602b      	str	r3, [r5, #0]
 8005634:	f7fb fe1c 	bl	8001270 <_isatty>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_isatty_r+0x1a>
 800563c:	682b      	ldr	r3, [r5, #0]
 800563e:	b103      	cbz	r3, 8005642 <_isatty_r+0x1a>
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	20000368 	.word	0x20000368

08005648 <_sbrk_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	4d06      	ldr	r5, [pc, #24]	@ (8005664 <_sbrk_r+0x1c>)
 800564c:	2300      	movs	r3, #0
 800564e:	4604      	mov	r4, r0
 8005650:	4608      	mov	r0, r1
 8005652:	602b      	str	r3, [r5, #0]
 8005654:	f7fb fe24 	bl	80012a0 <_sbrk>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_sbrk_r+0x1a>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_sbrk_r+0x1a>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	20000368 	.word	0x20000368

08005668 <memcpy>:
 8005668:	440a      	add	r2, r1
 800566a:	4291      	cmp	r1, r2
 800566c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005670:	d100      	bne.n	8005674 <memcpy+0xc>
 8005672:	4770      	bx	lr
 8005674:	b510      	push	{r4, lr}
 8005676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567e:	4291      	cmp	r1, r2
 8005680:	d1f9      	bne.n	8005676 <memcpy+0xe>
 8005682:	bd10      	pop	{r4, pc}

08005684 <abort>:
 8005684:	b508      	push	{r3, lr}
 8005686:	2006      	movs	r0, #6
 8005688:	f000 f85a 	bl	8005740 <raise>
 800568c:	2001      	movs	r0, #1
 800568e:	f7fb fd8f 	bl	80011b0 <_exit>

08005692 <_realloc_r>:
 8005692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005696:	4680      	mov	r8, r0
 8005698:	4615      	mov	r5, r2
 800569a:	460c      	mov	r4, r1
 800569c:	b921      	cbnz	r1, 80056a8 <_realloc_r+0x16>
 800569e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a2:	4611      	mov	r1, r2
 80056a4:	f7ff b9c0 	b.w	8004a28 <_malloc_r>
 80056a8:	b92a      	cbnz	r2, 80056b6 <_realloc_r+0x24>
 80056aa:	f7ff f949 	bl	8004940 <_free_r>
 80056ae:	2400      	movs	r4, #0
 80056b0:	4620      	mov	r0, r4
 80056b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b6:	f000 f85f 	bl	8005778 <_malloc_usable_size_r>
 80056ba:	4285      	cmp	r5, r0
 80056bc:	4606      	mov	r6, r0
 80056be:	d802      	bhi.n	80056c6 <_realloc_r+0x34>
 80056c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056c4:	d8f4      	bhi.n	80056b0 <_realloc_r+0x1e>
 80056c6:	4629      	mov	r1, r5
 80056c8:	4640      	mov	r0, r8
 80056ca:	f7ff f9ad 	bl	8004a28 <_malloc_r>
 80056ce:	4607      	mov	r7, r0
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d0ec      	beq.n	80056ae <_realloc_r+0x1c>
 80056d4:	42b5      	cmp	r5, r6
 80056d6:	462a      	mov	r2, r5
 80056d8:	4621      	mov	r1, r4
 80056da:	bf28      	it	cs
 80056dc:	4632      	movcs	r2, r6
 80056de:	f7ff ffc3 	bl	8005668 <memcpy>
 80056e2:	4621      	mov	r1, r4
 80056e4:	4640      	mov	r0, r8
 80056e6:	f7ff f92b 	bl	8004940 <_free_r>
 80056ea:	463c      	mov	r4, r7
 80056ec:	e7e0      	b.n	80056b0 <_realloc_r+0x1e>

080056ee <_raise_r>:
 80056ee:	291f      	cmp	r1, #31
 80056f0:	b538      	push	{r3, r4, r5, lr}
 80056f2:	4605      	mov	r5, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	d904      	bls.n	8005702 <_raise_r+0x14>
 80056f8:	2316      	movs	r3, #22
 80056fa:	6003      	str	r3, [r0, #0]
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	bd38      	pop	{r3, r4, r5, pc}
 8005702:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005704:	b112      	cbz	r2, 800570c <_raise_r+0x1e>
 8005706:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800570a:	b94b      	cbnz	r3, 8005720 <_raise_r+0x32>
 800570c:	4628      	mov	r0, r5
 800570e:	f000 f831 	bl	8005774 <_getpid_r>
 8005712:	4622      	mov	r2, r4
 8005714:	4601      	mov	r1, r0
 8005716:	4628      	mov	r0, r5
 8005718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571c:	f000 b818 	b.w	8005750 <_kill_r>
 8005720:	2b01      	cmp	r3, #1
 8005722:	d00a      	beq.n	800573a <_raise_r+0x4c>
 8005724:	1c59      	adds	r1, r3, #1
 8005726:	d103      	bne.n	8005730 <_raise_r+0x42>
 8005728:	2316      	movs	r3, #22
 800572a:	6003      	str	r3, [r0, #0]
 800572c:	2001      	movs	r0, #1
 800572e:	e7e7      	b.n	8005700 <_raise_r+0x12>
 8005730:	2100      	movs	r1, #0
 8005732:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005736:	4620      	mov	r0, r4
 8005738:	4798      	blx	r3
 800573a:	2000      	movs	r0, #0
 800573c:	e7e0      	b.n	8005700 <_raise_r+0x12>
	...

08005740 <raise>:
 8005740:	4b02      	ldr	r3, [pc, #8]	@ (800574c <raise+0xc>)
 8005742:	4601      	mov	r1, r0
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	f7ff bfd2 	b.w	80056ee <_raise_r>
 800574a:	bf00      	nop
 800574c:	20000018 	.word	0x20000018

08005750 <_kill_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4d07      	ldr	r5, [pc, #28]	@ (8005770 <_kill_r+0x20>)
 8005754:	2300      	movs	r3, #0
 8005756:	4604      	mov	r4, r0
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	f7fb fd17 	bl	8001190 <_kill>
 8005762:	1c43      	adds	r3, r0, #1
 8005764:	d102      	bne.n	800576c <_kill_r+0x1c>
 8005766:	682b      	ldr	r3, [r5, #0]
 8005768:	b103      	cbz	r3, 800576c <_kill_r+0x1c>
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	bd38      	pop	{r3, r4, r5, pc}
 800576e:	bf00      	nop
 8005770:	20000368 	.word	0x20000368

08005774 <_getpid_r>:
 8005774:	f7fb bd04 	b.w	8001180 <_getpid>

08005778 <_malloc_usable_size_r>:
 8005778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800577c:	1f18      	subs	r0, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfbc      	itt	lt
 8005782:	580b      	ldrlt	r3, [r1, r0]
 8005784:	18c0      	addlt	r0, r0, r3
 8005786:	4770      	bx	lr

08005788 <_init>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	bf00      	nop
 800578c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578e:	bc08      	pop	{r3}
 8005790:	469e      	mov	lr, r3
 8005792:	4770      	bx	lr

08005794 <_fini>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr
